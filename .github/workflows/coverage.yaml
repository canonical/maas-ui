name: Test coverage and TiCS Report
on:
  schedule:
    - cron: "30 0 * * 6" # Weekly full analysis
  push:
    branches:
      - "tics-debug-*"
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  test-coverage-tics:
    name: Run tests with coverage and generate TiCS report
    runs-on: [ self-hosted, linux, amd64, tiobe, jammy ]
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for TICS to analyze history

      # Special handling for PR event to ensure proper auth token access
      - name: Setup for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "Setting up for PR from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}"
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}

      # Cache node modules to speed up installation
      - name: Cache Node modules
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: 'yarn'

      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: CYPRESS_INSTALL_BINARY=0 yarn install --frozen-lockfile

      # Optimize test coverage generation
      - name: Run tests with coverage
        run: NODE_OPTIONS="--max-old-space-size=4096" yarn test-coverage
        env:
          CI: true

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 1

      # Optimize file list generation for TICS
      - name: Generate file list for TICS
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, analyze only changed files
            git diff --name-only origin/${{ github.event.pull_request.base.ref }} > tics-file-list.txt
          else
            # For scheduled runs and pushes, analyze the whole project
            find . -type f \( -name "*.js" -o -name "*.tsx" -o -name "*.ts" \) \
              -not -path "*/node_modules/*" \
              -not -path "*/coverage/*" \
              -not -path "*/.git/*" > tics-file-list.txt
          fi
          
          # Only keep files that exist (in case git diff includes deleted files)
          cat tics-file-list.txt | xargs -I{} sh -c '[ -f "{}" ] && echo "{}"' > temp-list.txt
          mv temp-list.txt tics-file-list.txt
          
          echo "Files to analyze (first 10):"
          head -10 tics-file-list.txt
          echo "Total files: $(wc -l < tics-file-list.txt)"

      # Run TICS with special handling for PR authentication
      - name: Run TICS Analyzer
        uses: tiobe/tics-github-action@v3
        env:
          # Add environment variables to optimize TICS performance
          TICS_NUM_THREADS: 4  # Adjust based on your runner's capabilities
        with:
          mode: ${{ github.event_name == 'pull_request' && 'client' || 'qserver' }}
          project: maas-ui
          viewerUrl: https://canonical.tiobe.com/tiobeweb/TICS/api/cfg?name=default
          ticsAuthToken: ${{ secrets.TICSAUTHTOKEN }}
          installTics: true
          tmpdir: /tmp/tics
          branchdir: ${{ github.workspace }}
          filelist: ${{ github.workspace }}/tics-file-list.txt

      - name: Upload TICS Report
        if: always()  # Upload even if TICS fails
        uses: actions/upload-artifact@v4
        with:
          name: tics-report
          path: /tmp/tics
          retention-days: 7

  publish-coverage-report:
    name: Publish Coverage Report
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    runs-on: [ self-hosted, linux, amd64, tiobe, jammy ]
    needs: test-coverage-tics
    permissions:
      id-token: write
      pages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4