name: Cypress
on:
  push:
    branches:
      - main
      - "3.*"
      - "*cypress*"
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  cypress:
    name: Cypress
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        groups: [ 'no-users', 'with-users' ]
    env:
      MAAS_URL: http://localhost:5240
      MAAS_UI_URL: http://localhost:8400
    steps:
      - uses: actions/checkout@main
      - name: Get branch name
        uses: nelonoel/branch-name@v1.0.1
      - name: Setup MAAS
        uses: canonical/setup-maas@main
        with:
          maas-url: ${{ env.MAAS_URL }}/MAAS
      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
      - name: Install Cypress
        uses: cypress-io/github-action@v4
        with:
          runTests: false
          install-command: yarn install
          build: yarn build
      - name: Create MAAS admin
        if: matrix.groups == 'with-users'
        run: sudo maas createadmin --username=admin --password=test --email=fake@example.org
      - name: Create MAAS non-admin user
        if: matrix.groups == 'with-users'
        run: |
          export API_KEY=`sudo maas apikey --username=admin`
          maas login admin http://localhost:5240/MAAS $API_KEY
          maas admin users create username=user password=test email=fake-user@example.org is_superuser=0
      - name: Wait for MAAS boot resources
        if: matrix.groups == 'with-users'
        shell: bash
        run: while [ $(maas admin boot-resources is-importing | cat) == "true" ]; do sleep 10; done; echo "syncing finished"
      - name: Run Cypress tests
        uses: cypress-io/github-action@v4
        with:
          config: baseUrl=${{env.MAAS_UI_URL}},pageLoadTimeout=100000
          install: false
          start: yarn start
          spec: cypress/e2e/${{ matrix.groups }}/**/*.spec.ts
          wait-on: ${{env.MAAS_UI_URL}}/MAAS/r/machines
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Collect MAAS logs
        if: failure()
        shell: bash
        run: journalctl -u snap.maas.pebble.service --since="1 hour ago" > cypress/maas_logs.txt
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: maas_logs
          path: cypress/maas_logs.txt
      - name: Create issue on failure
        # Create an issue if the job fails on push to main or 3.* branches
        if: failure() && github.event_name == 'push' && contains(fromJson('["main", "3.*"]'), env.BRANCH_NAME)
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          WORKFLOW: ${{ github.workflow }}
        with:
          filename: .github/ISSUE_TEMPLATE/ci-failure.md
          update_existing: true