import { useMemo } from "react";

import { ContextualMenu, Tooltip } from "@canonical/react-components";
import type { ColumnDef } from "@tanstack/react-table";
import { Link } from "react-router";

import { useGetIsSuperUser } from "@/app/api/query/auth";
import { useSidePanel } from "@/app/base/side-panel-context-new";
import urls from "@/app/base/urls";
import DeleteRecordForm from "@/app/domains/views/DomainDetails/ResourceRecords/DeleteRecordForm";
import EditRecordForm from "@/app/domains/views/DomainDetails/ResourceRecords/EditRecordForm";
import type { Domain, DomainResource } from "@/app/store/domain/types";
import { NodeType } from "@/app/store/types/node";

export type ResourceRecordsColumnData = DomainResource & {
  id: number;
};

export type ResourceRecordsColumnDef = ColumnDef<
  ResourceRecordsColumnData,
  Partial<ResourceRecordsColumnData>
>;

type Props = {
  id: Domain["id"];
};

const useResourceRecordsColumns = ({
  id,
}: Props): ResourceRecordsColumnDef[] => {
  const { openSidePanel } = useSidePanel();
  const isSuperUser = useGetIsSuperUser();
  return useMemo(
    (): ResourceRecordsColumnDef[] => [
      {
        accessorKey: "name",
        header: "Name",
        enableSorting: true,
        cell: ({
          row: {
            original: { node_type, system_id, name },
          },
        }) => {
          if (node_type != null && system_id != null) {
            const urlMap: Record<NodeType, (id: string) => string> = {
              [NodeType.MACHINE]: (id) => urls.machines.machine.index({ id }),
              [NodeType.DEVICE]: (id) => urls.devices.device.index({ id }),
              [NodeType.RACK_CONTROLLER]: (id) =>
                urls.controllers.controller.index({ id }),
              [NodeType.REGION_CONTROLLER]: (id) =>
                urls.controllers.controller.index({ id }),
              [NodeType.REGION_AND_RACK_CONTROLLER]: (id) =>
                urls.controllers.controller.index({ id }),
            };

            const getUrl = urlMap[node_type];
            if (getUrl) {
              return <Link to={getUrl(system_id)}>{name}</Link>;
            }
          }
          return <>{name}</>;
        },
      },
      {
        accessorKey: "node_type",
        header: "Type",
        enableSorting: true,
      },
      {
        accessorKey: "ttl",
        header: "TTL",
        enableSorting: true,
        cell: ({
          row: {
            original: { ttl },
          },
        }) => ttl || "(default)",
      },
      {
        accessorKey: "data",
        header: "Data",
        enableSorting: true,
      },
      {
        accessorKey: "actions",
        header: "Actions",
        enableSorting: false,
        cell: ({ row }) => {
          const isAutogenerated = !row.original.dnsresource_id;
          const canEdit = !isAutogenerated && isSuperUser.data;
          return (
            <Tooltip
              message={
                isAutogenerated
                  ? "System-generated records cannot be edited"
                  : !isSuperUser
                    ? "You do not have permission to edit this record"
                    : null
              }
            >
              <ContextualMenu
                hasToggleIcon={true}
                links={[
                  {
                    children: "Edit record...",
                    onClick: () => {
                      openSidePanel({
                        component: EditRecordForm,
                        title: "Edit Record",
                        props: {
                          id,
                          resource: row.original,
                        },
                      });
                    },
                  },
                  {
                    children: "Remove record...",
                    onClick: () => {
                      openSidePanel({
                        component: DeleteRecordForm,
                        title: "Remove record",
                        props: {
                          id,
                          resource: row.original,
                        },
                      });
                    },
                  },
                ]}
                toggleAppearance="base"
                toggleClassName="u-no-margin--bottom is-small is-dense"
                toggleDisabled={!canEdit}
              />
            </Tooltip>
          );
        },
      },
    ],
    [id, isSuperUser, openSidePanel]
  );
};

export default useResourceRecordsColumns;
