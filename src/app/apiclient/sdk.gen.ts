// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-fetch";

import type {
  AccessTokenData,
  AccessTokenResponse2,
  AccessTokenError,
  LoginData,
  LoginResponse,
  LoginError,
  ListEventsData,
  ListEventsResponse,
  ListEventsError,
  ListDomainsData,
  ListDomainsResponse,
  ListDomainsError,
  CreateDomainData,
  CreateDomainResponse,
  CreateDomainError,
  DeleteDomainData,
  DeleteDomainResponse,
  DeleteDomainError,
  GetDomainData,
  GetDomainResponse,
  GetDomainError,
  ListFabricsData,
  ListFabricsResponse,
  ListFabricsError,
  CreateFabricData,
  CreateFabricResponse,
  CreateFabricError,
  DeleteFabricData,
  DeleteFabricResponse,
  DeleteFabricError,
  GetFabricData,
  GetFabricResponse,
  GetFabricError,
  UpdateFabricData,
  UpdateFabricResponse,
  UpdateFabricError,
  ListInterfacesData,
  ListInterfacesResponse,
  ListInterfacesError,
  ListFabricVlanSubnetIprangeData,
  ListFabricVlanSubnetIprangeResponse,
  ListFabricVlanSubnetIprangeError,
  CreateFabricVlanSubnetIprangeData,
  CreateFabricVlanSubnetIprangeResponse,
  CreateFabricVlanSubnetIprangeError,
  DeleteFabricVlanSubnetIprangeData,
  DeleteFabricVlanSubnetIprangeResponse,
  DeleteFabricVlanSubnetIprangeError,
  UpdateFabricVlanSubnetIprangeData,
  UpdateFabricVlanSubnetIprangeResponse,
  UpdateFabricVlanSubnetIprangeError,
  GetFabricVlanSubnetIprangeData,
  GetFabricVlanSubnetIprangeResponse,
  GetFabricVlanSubnetIprangeError,
  GetMachinePowerParametersData,
  GetMachinePowerParametersResponse,
  GetMachinePowerParametersError,
  ListMachinePciDevicesData,
  ListMachinePciDevicesResponse,
  ListMachinePciDevicesError,
  ListMachineUsbDevicesData,
  ListMachineUsbDevicesResponse,
  ListMachineUsbDevicesError,
  ListMachinesData,
  ListMachinesResponse,
  ListMachinesError,
  ListFabricVlanSubnetReservedIpsData,
  ListFabricVlanSubnetReservedIpsResponse,
  ListFabricVlanSubnetReservedIpsError,
  CreateFabricVlanSubnetReservedIpData,
  CreateFabricVlanSubnetReservedIpResponse,
  CreateFabricVlanSubnetReservedIpError,
  DeleteFabricVlanSubnetReservedIpData,
  DeleteFabricVlanSubnetReservedIpResponse,
  DeleteFabricVlanSubnetReservedIpError,
  UpdateFabricVlanSubnetReservedIpData,
  UpdateFabricVlanSubnetReservedIpResponse,
  UpdateFabricVlanSubnetReservedIpError,
  GetFabricVlanSubnetReservedIpData,
  GetFabricVlanSubnetReservedIpResponse,
  GetFabricVlanSubnetReservedIpError,
  ListResourcePoolsData,
  ListResourcePoolsResponse,
  ListResourcePoolsError,
  CreateResourcePoolData,
  CreateResourcePoolResponse,
  CreateResourcePoolError,
  GetResourcePoolData,
  GetResourcePoolResponse,
  GetResourcePoolError,
  UpdateResourcePoolData,
  UpdateResourcePoolResponse,
  UpdateResourcePoolError,
  ListSpacesData,
  ListSpacesResponse,
  ListSpacesError,
  CreateSpaceData,
  CreateSpaceResponse,
  CreateSpaceError,
  DeleteSpaceData,
  DeleteSpaceResponse,
  DeleteSpaceError,
  GetSpaceData,
  GetSpaceResponse,
  GetSpaceError,
  UpdateSpaceData,
  UpdateSpaceResponse,
  UpdateSpaceError,
  ListUserSshkeysData,
  ListUserSshkeysResponse,
  ListUserSshkeysError,
  CreateUserSshkeysData,
  CreateUserSshkeysResponse,
  CreateUserSshkeysError,
  DeleteUserSshkeyData,
  DeleteUserSshkeyResponse,
  DeleteUserSshkeyError,
  GetUserSshkeyData,
  GetUserSshkeyResponse,
  GetUserSshkeyError,
  ImportUserSshkeysData,
  ImportUserSshkeysResponse,
  ImportUserSshkeysError,
  GetUserSslkeysData,
  GetUserSslkeysResponse,
  GetUserSslkeysError,
  CreateUserSslkeyData,
  CreateUserSslkeyResponse,
  CreateUserSslkeyError,
  DeleteUserSslkeyData,
  DeleteUserSslkeyResponse,
  DeleteUserSslkeyError,
  GetUserSslkeyData,
  GetUserSslkeyResponse,
  GetUserSslkeyError,
  ListFabricVlanSubnetsData,
  ListFabricVlanSubnetsResponse,
  ListFabricVlanSubnetsError,
  CreateFabricVlanSubnetData,
  CreateFabricVlanSubnetResponse,
  CreateFabricVlanSubnetError,
  DeleteFabricVlanSubnetData,
  DeleteFabricVlanSubnetResponse,
  DeleteFabricVlanSubnetError,
  UpdateFabricVlanSubnetData,
  UpdateFabricVlanSubnetResponse,
  UpdateFabricVlanSubnetError,
  GetFabricVlanSubnetData,
  GetFabricVlanSubnetResponse,
  GetFabricVlanSubnetError,
  GetUserInfoData,
  GetUserInfoResponse,
  GetUserInfoError,
  ListUsersData,
  ListUsersResponse,
  ListUsersError,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  DeleteUserData,
  DeleteUserResponse,
  DeleteUserError,
  GetUserData,
  GetUserResponse,
  GetUserError,
  UpdateUserData,
  UpdateUserResponse,
  UpdateUserError,
  ListFabricVlansData,
  ListFabricVlansResponse,
  ListFabricVlansError,
  CreateFabricVlanData,
  CreateFabricVlanResponse,
  CreateFabricVlanError,
  DeleteFabricVlanData,
  DeleteFabricVlanResponse,
  DeleteFabricVlanError,
  GetFabricVlanData,
  GetFabricVlanResponse,
  GetFabricVlanError,
  UpdateFabricVlanData,
  UpdateFabricVlanResponse,
  UpdateFabricVlanError,
  ListZonesData,
  ListZonesResponse,
  ListZonesError,
  CreateZoneData,
  CreateZoneResponse,
  CreateZoneError,
  DeleteZoneData,
  DeleteZoneResponse,
  DeleteZoneError,
  GetZoneData,
  GetZoneResponse,
  GetZoneError,
  UpdateZoneData,
  UpdateZoneResponse,
  UpdateZoneError,
  ListZonesWithSummaryData,
  ListZonesWithSummaryResponse,
  ListZonesWithSummaryError,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Access Token
 */
export const accessToken = <ThrowOnError extends boolean = false>(
  options?: Options<AccessTokenData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AccessTokenResponse2,
    AccessTokenError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/auth/access_token",
  });
};

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    LoginResponse,
    LoginError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/MAAS/a/v3/auth/login",
  });
};

/**
 * List Events
 */
export const listEvents = <ThrowOnError extends boolean = false>(
  options?: Options<ListEventsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListEventsResponse,
    ListEventsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/events",
  });
};

/**
 * List Domains
 */
export const listDomains = <ThrowOnError extends boolean = false>(
  options?: Options<ListDomainsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListDomainsResponse,
    ListDomainsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains",
  });
};

/**
 * Create Domain
 */
export const createDomain = <ThrowOnError extends boolean = false>(
  options: Options<CreateDomainData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateDomainResponse,
    CreateDomainError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains",
  });
};

/**
 * Delete Domain
 */
export const deleteDomain = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDomainData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteDomainResponse,
    DeleteDomainError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains/{domain_id}",
  });
};

/**
 * Get Domain
 */
export const getDomain = <ThrowOnError extends boolean = false>(
  options: Options<GetDomainData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetDomainResponse,
    GetDomainError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains/{domain_id}",
  });
};

/**
 * List Fabrics
 */
export const listFabrics = <ThrowOnError extends boolean = false>(
  options?: Options<ListFabricsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListFabricsResponse,
    ListFabricsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics",
  });
};

/**
 * Create Fabric
 */
export const createFabric = <ThrowOnError extends boolean = false>(
  options: Options<CreateFabricData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateFabricResponse,
    CreateFabricError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics",
  });
};

/**
 * Delete Fabric
 */
export const deleteFabric = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteFabricResponse,
    DeleteFabricError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}",
  });
};

/**
 * Get Fabric
 */
export const getFabric = <ThrowOnError extends boolean = false>(
  options: Options<GetFabricData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetFabricResponse,
    GetFabricError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}",
  });
};

/**
 * Update Fabric
 */
export const updateFabric = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFabricData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateFabricResponse,
    UpdateFabricError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}",
  });
};

/**
 * List Interfaces
 */
export const listInterfaces = <ThrowOnError extends boolean = false>(
  options: Options<ListInterfacesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListInterfacesResponse,
    ListInterfacesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{node_id}/interfaces",
  });
};

/**
 * List Fabric Vlan Subnet Iprange
 */
export const listFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListFabricVlanSubnetIprangeResponse,
    ListFabricVlanSubnetIprangeError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges",
  });
};

/**
 * Create Fabric Vlan Subnet Iprange
 */
export const createFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateFabricVlanSubnetIprangeResponse,
    CreateFabricVlanSubnetIprangeError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges",
  });
};

/**
 * Delete Fabric Vlan Subnet Iprange
 */
export const deleteFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteFabricVlanSubnetIprangeResponse,
    DeleteFabricVlanSubnetIprangeError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}",
  });
};

/**
 * Update Fabric Vlan Subnet Iprange
 */
export const updateFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateFabricVlanSubnetIprangeResponse,
    UpdateFabricVlanSubnetIprangeError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}",
  });
};

/**
 * Get Fabric Vlan Subnet Iprange
 */
export const getFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetFabricVlanSubnetIprangeResponse,
    GetFabricVlanSubnetIprangeError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{id}",
  });
};

/**
 * Get Machine Power Parameters
 */
export const getMachinePowerParameters = <ThrowOnError extends boolean = false>(
  options: Options<GetMachinePowerParametersData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetMachinePowerParametersResponse,
    GetMachinePowerParametersError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{system_id}/power_parameters",
  });
};

/**
 * List Machine Pci Devices
 */
export const listMachinePciDevices = <ThrowOnError extends boolean = false>(
  options: Options<ListMachinePciDevicesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListMachinePciDevicesResponse,
    ListMachinePciDevicesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{system_id}/pci_devices",
  });
};

/**
 * List Machine Usb Devices
 */
export const listMachineUsbDevices = <ThrowOnError extends boolean = false>(
  options: Options<ListMachineUsbDevicesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListMachineUsbDevicesResponse,
    ListMachineUsbDevicesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{system_id}/usb_devices",
  });
};

/**
 * List Machines
 */
export const listMachines = <ThrowOnError extends boolean = false>(
  options?: Options<ListMachinesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListMachinesResponse,
    ListMachinesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines",
  });
};

/**
 * List Fabric Vlan Subnet Reserved Ips
 */
export const listFabricVlanSubnetReservedIps = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListFabricVlanSubnetReservedIpsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListFabricVlanSubnetReservedIpsResponse,
    ListFabricVlanSubnetReservedIpsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips",
  });
};

/**
 * Create Fabric Vlan Subnet Reserved Ip
 */
export const createFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateFabricVlanSubnetReservedIpResponse,
    CreateFabricVlanSubnetReservedIpError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips",
  });
};

/**
 * Delete Fabric Vlan Subnet Reserved Ip
 */
export const deleteFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteFabricVlanSubnetReservedIpResponse,
    DeleteFabricVlanSubnetReservedIpError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}",
  });
};

/**
 * Update Fabric Vlan Subnet Reserved Ip
 */
export const updateFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateFabricVlanSubnetReservedIpResponse,
    UpdateFabricVlanSubnetReservedIpError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}",
  });
};

/**
 * Get Fabric Vlan Subnet Reserved Ip
 */
export const getFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetFabricVlanSubnetReservedIpResponse,
    GetFabricVlanSubnetReservedIpError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{reservedip_id}",
  });
};

/**
 * List Resource Pools
 */
export const listResourcePools = <ThrowOnError extends boolean = false>(
  options?: Options<ListResourcePoolsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListResourcePoolsResponse,
    ListResourcePoolsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools",
  });
};

/**
 * Create Resource Pool
 */
export const createResourcePool = <ThrowOnError extends boolean = false>(
  options: Options<CreateResourcePoolData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateResourcePoolResponse,
    CreateResourcePoolError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools",
  });
};

/**
 * Get Resource Pool
 */
export const getResourcePool = <ThrowOnError extends boolean = false>(
  options: Options<GetResourcePoolData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetResourcePoolResponse,
    GetResourcePoolError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools/{resource_pool_id}",
  });
};

/**
 * Update Resource Pool
 */
export const updateResourcePool = <ThrowOnError extends boolean = false>(
  options: Options<UpdateResourcePoolData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateResourcePoolResponse,
    UpdateResourcePoolError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools/{resource_pool_id}",
  });
};

/**
 * List Spaces
 */
export const listSpaces = <ThrowOnError extends boolean = false>(
  options?: Options<ListSpacesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListSpacesResponse,
    ListSpacesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces",
  });
};

/**
 * Create Space
 */
export const createSpace = <ThrowOnError extends boolean = false>(
  options: Options<CreateSpaceData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateSpaceResponse,
    CreateSpaceError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces",
  });
};

/**
 * Delete Space
 */
export const deleteSpace = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSpaceData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteSpaceResponse,
    DeleteSpaceError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces/{space_id}",
  });
};

/**
 * Get Space
 */
export const getSpace = <ThrowOnError extends boolean = false>(
  options: Options<GetSpaceData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetSpaceResponse,
    GetSpaceError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces/{space_id}",
  });
};

/**
 * Update Space
 */
export const updateSpace = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSpaceData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateSpaceResponse,
    UpdateSpaceError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces/{space_id}",
  });
};

/**
 * List User Sshkeys
 */
export const listUserSshkeys = <ThrowOnError extends boolean = false>(
  options?: Options<ListUserSshkeysData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListUserSshkeysResponse,
    ListUserSshkeysError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys",
  });
};

/**
 * Create User Sshkeys
 */
export const createUserSshkeys = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserSshkeysData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateUserSshkeysResponse,
    CreateUserSshkeysError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys",
  });
};

/**
 * Delete User Sshkey
 */
export const deleteUserSshkey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserSshkeyData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteUserSshkeyResponse,
    DeleteUserSshkeyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys/{id}",
  });
};

/**
 * Get User Sshkey
 */
export const getUserSshkey = <ThrowOnError extends boolean = false>(
  options: Options<GetUserSshkeyData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetUserSshkeyResponse,
    GetUserSshkeyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys/{sshkey_id}",
  });
};

/**
 * Import User Sshkeys
 */
export const importUserSshkeys = <ThrowOnError extends boolean = false>(
  options: Options<ImportUserSshkeysData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ImportUserSshkeysResponse,
    ImportUserSshkeysError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys:import",
  });
};

/**
 * Get User Sslkeys
 */
export const getUserSslkeys = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserSslkeysData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetUserSslkeysResponse,
    GetUserSslkeysError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys",
  });
};

/**
 * Create User Sslkey
 */
export const createUserSslkey = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserSslkeyData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateUserSslkeyResponse,
    CreateUserSslkeyError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys",
  });
};

/**
 * Delete User Sslkey
 */
export const deleteUserSslkey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserSslkeyData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteUserSslkeyResponse,
    DeleteUserSslkeyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}",
  });
};

/**
 * Get User Sslkey
 */
export const getUserSslkey = <ThrowOnError extends boolean = false>(
  options: Options<GetUserSslkeyData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetUserSslkeyResponse,
    GetUserSslkeyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}",
  });
};

/**
 * List Fabric Vlan Subnets
 */
export const listFabricVlanSubnets = <ThrowOnError extends boolean = false>(
  options: Options<ListFabricVlanSubnetsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListFabricVlanSubnetsResponse,
    ListFabricVlanSubnetsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets",
  });
};

/**
 * Create Fabric Vlan Subnet
 */
export const createFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<CreateFabricVlanSubnetData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateFabricVlanSubnetResponse,
    CreateFabricVlanSubnetError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets",
  });
};

/**
 * Delete Fabric Vlan Subnet
 */
export const deleteFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricVlanSubnetData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteFabricVlanSubnetResponse,
    DeleteFabricVlanSubnetError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}",
  });
};

/**
 * Update Fabric Vlan Subnet
 */
export const updateFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFabricVlanSubnetData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateFabricVlanSubnetResponse,
    UpdateFabricVlanSubnetError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}",
  });
};

/**
 * Get Fabric Vlan Subnet
 */
export const getFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<GetFabricVlanSubnetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetFabricVlanSubnetResponse,
    GetFabricVlanSubnetError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}",
  });
};

/**
 * Get User Info
 */
export const getUserInfo = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserInfoData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetUserInfoResponse,
    GetUserInfoError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me",
  });
};

/**
 * List Users
 */
export const listUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ListUsersData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListUsersResponse,
    ListUsersError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users",
  });
};

/**
 * Create User
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users",
  });
};

/**
 * Delete User
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteUserResponse,
    DeleteUserError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/{user_id}",
  });
};

/**
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetUserResponse,
    GetUserError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/{user_id}",
  });
};

/**
 * Update User
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/{user_id}",
  });
};

/**
 * List Fabric Vlans
 */
export const listFabricVlans = <ThrowOnError extends boolean = false>(
  options: Options<ListFabricVlansData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListFabricVlansResponse,
    ListFabricVlansError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans",
  });
};

/**
 * Create Fabric Vlan
 */
export const createFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<CreateFabricVlanData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateFabricVlanResponse,
    CreateFabricVlanError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans",
  });
};

/**
 * Delete Fabric Vlan
 */
export const deleteFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricVlanData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteFabricVlanResponse,
    DeleteFabricVlanError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}",
  });
};

/**
 * Get Fabric Vlan
 */
export const getFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<GetFabricVlanData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetFabricVlanResponse,
    GetFabricVlanError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}",
  });
};

/**
 * Update Fabric Vlan
 */
export const updateFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFabricVlanData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateFabricVlanResponse,
    UpdateFabricVlanError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}",
  });
};

/**
 * List Zones
 */
export const listZones = <ThrowOnError extends boolean = false>(
  options?: Options<ListZonesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListZonesResponse,
    ListZonesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones",
  });
};

/**
 * Create Zone
 */
export const createZone = <ThrowOnError extends boolean = false>(
  options: Options<CreateZoneData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateZoneResponse,
    CreateZoneError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones",
  });
};

/**
 * Delete Zone
 * Deletes a zone. All the resources belonging to this zone will be moved to the default zone.
 */
export const deleteZone = <ThrowOnError extends boolean = false>(
  options: Options<DeleteZoneData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteZoneResponse,
    DeleteZoneError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones/{zone_id}",
  });
};

/**
 * Get Zone
 */
export const getZone = <ThrowOnError extends boolean = false>(
  options: Options<GetZoneData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetZoneResponse,
    GetZoneError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones/{zone_id}",
  });
};

/**
 * Update Zone
 */
export const updateZone = <ThrowOnError extends boolean = false>(
  options: Options<UpdateZoneData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateZoneResponse,
    UpdateZoneError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones/{zone_id}",
  });
};

/**
 * List zones with a summary. ONLY FOR INTERNAL USAGE.
 * List zones with a summary. This endpoint is only for internal usage and might be changed or removed without notice.
 */
export const listZonesWithSummary = <ThrowOnError extends boolean = false>(
  options?: Options<ListZonesWithSummaryData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListZonesWithSummaryResponse,
    ListZonesWithSummaryError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones_with_summary",
  });
};
