// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "./client";
import type {
  AccessTokenData,
  AccessTokenResponses,
  AccessTokenErrors,
  LoginData,
  LoginResponses,
  LoginErrors,
  GetConfigurationData,
  GetConfigurationResponses,
  GetConfigurationErrors,
  SetConfigurationData,
  SetConfigurationResponses,
  SetConfigurationErrors,
  GetConfigurationsData,
  GetConfigurationsResponses,
  GetConfigurationsErrors,
  SetConfigurationsData,
  SetConfigurationsResponses,
  SetConfigurationsErrors,
  ListEventsData,
  ListEventsResponses,
  ListEventsErrors,
  ClearAllDiscoveriesWithOptionalIpAndMacData,
  ClearAllDiscoveriesWithOptionalIpAndMacResponses,
  ClearAllDiscoveriesWithOptionalIpAndMacErrors,
  ListDiscoveriesData,
  ListDiscoveriesResponses,
  ListDiscoveriesErrors,
  ClearNeighboursDiscoveriesData,
  ClearNeighboursDiscoveriesResponses,
  ClearNeighboursDiscoveriesErrors,
  ClearRdnsAndMdnsDiscoveriesData,
  ClearRdnsAndMdnsDiscoveriesResponses,
  ClearRdnsAndMdnsDiscoveriesErrors,
  GetDiscoveryData,
  GetDiscoveryResponses,
  GetDiscoveryErrors,
  ListDomainsData,
  ListDomainsResponses,
  ListDomainsErrors,
  CreateDomainData,
  CreateDomainResponses,
  CreateDomainErrors,
  GetDomainRrsetsData,
  GetDomainRrsetsResponses,
  GetDomainRrsetsErrors,
  CreateDomainRrsetsData,
  CreateDomainRrsetsResponses,
  CreateDomainRrsetsErrors,
  DeleteDomainData,
  DeleteDomainResponses,
  DeleteDomainErrors,
  GetDomainData,
  GetDomainResponses,
  GetDomainErrors,
  ListFabricsData,
  ListFabricsResponses,
  ListFabricsErrors,
  CreateFabricData,
  CreateFabricResponses,
  CreateFabricErrors,
  DeleteFabricData,
  DeleteFabricResponses,
  DeleteFabricErrors,
  GetFabricData,
  GetFabricResponses,
  GetFabricErrors,
  UpdateFabricData,
  UpdateFabricResponses,
  UpdateFabricErrors,
  ListInterfacesData,
  ListInterfacesResponses,
  ListInterfacesErrors,
  ListFabricVlanSubnetIprangeData,
  ListFabricVlanSubnetIprangeResponses,
  ListFabricVlanSubnetIprangeErrors,
  CreateFabricVlanSubnetIprangeData,
  CreateFabricVlanSubnetIprangeResponses,
  CreateFabricVlanSubnetIprangeErrors,
  DeleteFabricVlanSubnetIprangeData,
  DeleteFabricVlanSubnetIprangeResponses,
  DeleteFabricVlanSubnetIprangeErrors,
  UpdateFabricVlanSubnetIprangeData,
  UpdateFabricVlanSubnetIprangeResponses,
  UpdateFabricVlanSubnetIprangeErrors,
  GetFabricVlanSubnetIprangeData,
  GetFabricVlanSubnetIprangeResponses,
  GetFabricVlanSubnetIprangeErrors,
  GetMachinePowerParametersData,
  GetMachinePowerParametersResponses,
  GetMachinePowerParametersErrors,
  ListMachinePciDevicesData,
  ListMachinePciDevicesResponses,
  ListMachinePciDevicesErrors,
  ListMachineUsbDevicesData,
  ListMachineUsbDevicesResponses,
  ListMachineUsbDevicesErrors,
  ListMachinesData,
  ListMachinesResponses,
  ListMachinesErrors,
  ListNotificationsData,
  ListNotificationsResponses,
  ListNotificationsErrors,
  CreateNotificationData,
  CreateNotificationResponses,
  CreateNotificationErrors,
  DeleteNotificationData,
  DeleteNotificationResponses,
  DeleteNotificationErrors,
  GetNotificationData,
  GetNotificationResponses,
  GetNotificationErrors,
  UpdateNotificationData,
  UpdateNotificationResponses,
  UpdateNotificationErrors,
  DismissNotificationData,
  DismissNotificationResponses,
  DismissNotificationErrors,
  ListPackageRepositoriesData,
  ListPackageRepositoriesResponses,
  ListPackageRepositoriesErrors,
  CreatePackageRepositoryData,
  CreatePackageRepositoryResponses,
  CreatePackageRepositoryErrors,
  DeletePackageRepositoryData,
  DeletePackageRepositoryResponses,
  DeletePackageRepositoryErrors,
  GetPackageRepositoryData,
  GetPackageRepositoryResponses,
  GetPackageRepositoryErrors,
  UpdatePackageRepositoryData,
  UpdatePackageRepositoryResponses,
  UpdatePackageRepositoryErrors,
  ListFabricVlanSubnetReservedIpsData,
  ListFabricVlanSubnetReservedIpsResponses,
  ListFabricVlanSubnetReservedIpsErrors,
  CreateFabricVlanSubnetReservedIpData,
  CreateFabricVlanSubnetReservedIpResponses,
  CreateFabricVlanSubnetReservedIpErrors,
  DeleteFabricVlanSubnetReservedIpData,
  DeleteFabricVlanSubnetReservedIpResponses,
  DeleteFabricVlanSubnetReservedIpErrors,
  UpdateFabricVlanSubnetReservedIpData,
  UpdateFabricVlanSubnetReservedIpResponses,
  UpdateFabricVlanSubnetReservedIpErrors,
  GetFabricVlanSubnetReservedIpData,
  GetFabricVlanSubnetReservedIpResponses,
  GetFabricVlanSubnetReservedIpErrors,
  ListResourcePoolsData,
  ListResourcePoolsResponses,
  ListResourcePoolsErrors,
  CreateResourcePoolData,
  CreateResourcePoolResponses,
  CreateResourcePoolErrors,
  DeleteResourcePoolData,
  DeleteResourcePoolResponses,
  DeleteResourcePoolErrors,
  GetResourcePoolData,
  GetResourcePoolResponses,
  GetResourcePoolErrors,
  UpdateResourcePoolData,
  UpdateResourcePoolResponses,
  UpdateResourcePoolErrors,
  ListResourcePoolsWithSummaryData,
  ListResourcePoolsWithSummaryResponses,
  ListResourcePoolsWithSummaryErrors,
  ListFabricVlanSubnetStaticroutesData,
  ListFabricVlanSubnetStaticroutesResponses,
  ListFabricVlanSubnetStaticroutesErrors,
  CreateFabricVlanSubnetStaticrouteData,
  CreateFabricVlanSubnetStaticrouteResponses,
  CreateFabricVlanSubnetStaticrouteErrors,
  DeleteFabricVlanSubnetStaticrouteData,
  DeleteFabricVlanSubnetStaticrouteResponses,
  DeleteFabricVlanSubnetStaticrouteErrors,
  GetFabricVlanSubnetStaticrouteData,
  GetFabricVlanSubnetStaticrouteResponses,
  GetFabricVlanSubnetStaticrouteErrors,
  UpdateFabricVlanSubnetStaticrouteData,
  UpdateFabricVlanSubnetStaticrouteResponses,
  UpdateFabricVlanSubnetStaticrouteErrors,
  ListSpacesData,
  ListSpacesResponses,
  ListSpacesErrors,
  CreateSpaceData,
  CreateSpaceResponses,
  CreateSpaceErrors,
  DeleteSpaceData,
  DeleteSpaceResponses,
  DeleteSpaceErrors,
  GetSpaceData,
  GetSpaceResponses,
  GetSpaceErrors,
  UpdateSpaceData,
  UpdateSpaceResponses,
  UpdateSpaceErrors,
  ListUserSshkeysData,
  ListUserSshkeysResponses,
  ListUserSshkeysErrors,
  CreateUserSshkeysData,
  CreateUserSshkeysResponses,
  CreateUserSshkeysErrors,
  DeleteUserSshkeyData,
  DeleteUserSshkeyResponses,
  DeleteUserSshkeyErrors,
  GetUserSshkeyData,
  GetUserSshkeyResponses,
  GetUserSshkeyErrors,
  ImportUserSshkeysData,
  ImportUserSshkeysResponses,
  ImportUserSshkeysErrors,
  GetUserSslkeysData,
  GetUserSslkeysResponses,
  GetUserSslkeysErrors,
  CreateUserSslkeyData,
  CreateUserSslkeyResponses,
  CreateUserSslkeyErrors,
  DeleteUserSslkeyData,
  DeleteUserSslkeyResponses,
  DeleteUserSslkeyErrors,
  GetUserSslkeyData,
  GetUserSslkeyResponses,
  GetUserSslkeyErrors,
  GetUserSslkeysWithSummaryData,
  GetUserSslkeysWithSummaryResponses,
  GetUserSslkeysWithSummaryErrors,
  ListFabricVlanSubnetsData,
  ListFabricVlanSubnetsResponses,
  ListFabricVlanSubnetsErrors,
  CreateFabricVlanSubnetData,
  CreateFabricVlanSubnetResponses,
  CreateFabricVlanSubnetErrors,
  DeleteFabricVlanSubnetData,
  DeleteFabricVlanSubnetResponses,
  DeleteFabricVlanSubnetErrors,
  UpdateFabricVlanSubnetData,
  UpdateFabricVlanSubnetResponses,
  UpdateFabricVlanSubnetErrors,
  GetFabricVlanSubnetData,
  GetFabricVlanSubnetResponses,
  GetFabricVlanSubnetErrors,
  ListTagsData,
  ListTagsResponses,
  ListTagsErrors,
  CreateTagData,
  CreateTagResponses,
  CreateTagErrors,
  DeleteTagData,
  DeleteTagResponses,
  DeleteTagErrors,
  GetTagData,
  GetTagResponses,
  GetTagErrors,
  UpdateTagData,
  UpdateTagResponses,
  UpdateTagErrors,
  GetMeWithSummaryData,
  GetMeWithSummaryResponses,
  GetMeWithSummaryErrors,
  GetUserInfoData,
  GetUserInfoResponses,
  GetUserInfoErrors,
  CompleteIntroData,
  CompleteIntroResponses,
  CompleteIntroErrors,
  ChangePasswordUserData,
  ChangePasswordUserResponses,
  ChangePasswordUserErrors,
  ListUsersData,
  ListUsersResponses,
  ListUsersErrors,
  CreateUserData,
  CreateUserResponses,
  CreateUserErrors,
  DeleteUserData,
  DeleteUserResponses,
  DeleteUserErrors,
  GetUserData,
  GetUserResponses,
  GetUserErrors,
  UpdateUserData,
  UpdateUserResponses,
  UpdateUserErrors,
  ChangePasswordAdminData,
  ChangePasswordAdminResponses,
  ChangePasswordAdminErrors,
  ListUsersWithSummaryData,
  ListUsersWithSummaryResponses,
  ListUsersWithSummaryErrors,
  ListFabricVlansData,
  ListFabricVlansResponses,
  ListFabricVlansErrors,
  CreateFabricVlanData,
  CreateFabricVlanResponses,
  CreateFabricVlanErrors,
  DeleteFabricVlanData,
  DeleteFabricVlanResponses,
  DeleteFabricVlanErrors,
  GetFabricVlanData,
  GetFabricVlanResponses,
  GetFabricVlanErrors,
  UpdateFabricVlanData,
  UpdateFabricVlanResponses,
  UpdateFabricVlanErrors,
  ListZonesData,
  ListZonesResponses,
  ListZonesErrors,
  CreateZoneData,
  CreateZoneResponses,
  CreateZoneErrors,
  DeleteZoneData,
  DeleteZoneResponses,
  DeleteZoneErrors,
  GetZoneData,
  GetZoneResponses,
  GetZoneErrors,
  UpdateZoneData,
  UpdateZoneResponses,
  UpdateZoneErrors,
  ListZonesWithSummaryData,
  ListZonesWithSummaryResponses,
  ListZonesWithSummaryErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Access Token
 */
export const accessToken = <ThrowOnError extends boolean = false>(
  options?: Options<AccessTokenData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AccessTokenResponses,
    AccessTokenErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/auth/access_token",
    ...options,
  });
};

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginResponses,
    LoginErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/MAAS/a/v3/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options.headers,
    },
  });
};

/**
 * Get Configuration
 */
export const getConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<GetConfigurationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetConfigurationResponses,
    GetConfigurationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/configurations/{name}",
    ...options,
  });
};

/**
 * Set Configuration
 */
export const setConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<SetConfigurationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    SetConfigurationResponses,
    SetConfigurationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/configurations/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Configurations
 */
export const getConfigurations = <ThrowOnError extends boolean = false>(
  options?: Options<GetConfigurationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetConfigurationsResponses,
    GetConfigurationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/configurations",
    ...options,
  });
};

/**
 * Set Configurations
 */
export const setConfigurations = <ThrowOnError extends boolean = false>(
  options: Options<SetConfigurationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    SetConfigurationsResponses,
    SetConfigurationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/configurations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Events
 */
export const listEvents = <ThrowOnError extends boolean = false>(
  options?: Options<ListEventsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListEventsResponses,
    ListEventsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/events",
    ...options,
  });
};

/**
 * Clear All Discoveries With Optional Ip And Mac
 */
export const clearAllDiscoveriesWithOptionalIpAndMac = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ClearAllDiscoveriesWithOptionalIpAndMacData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    ClearAllDiscoveriesWithOptionalIpAndMacResponses,
    ClearAllDiscoveriesWithOptionalIpAndMacErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/discoveries",
    ...options,
  });
};

/**
 * List Discoveries
 */
export const listDiscoveries = <ThrowOnError extends boolean = false>(
  options?: Options<ListDiscoveriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDiscoveriesResponses,
    ListDiscoveriesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/discoveries",
    ...options,
  });
};

/**
 * Clear Neighbours Discoveries
 */
export const clearNeighboursDiscoveries = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ClearNeighboursDiscoveriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    ClearNeighboursDiscoveriesResponses,
    ClearNeighboursDiscoveriesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/discoveries:clear_neighbours",
    ...options,
  });
};

/**
 * Clear Rdns And Mdns Discoveries
 */
export const clearRdnsAndMdnsDiscoveries = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ClearRdnsAndMdnsDiscoveriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    ClearRdnsAndMdnsDiscoveriesResponses,
    ClearRdnsAndMdnsDiscoveriesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/discoveries:clear_dns",
    ...options,
  });
};

/**
 * Get Discovery
 */
export const getDiscovery = <ThrowOnError extends boolean = false>(
  options: Options<GetDiscoveryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDiscoveryResponses,
    GetDiscoveryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/discoveries/{discovery_id}",
    ...options,
  });
};

/**
 * List Domains
 */
export const listDomains = <ThrowOnError extends boolean = false>(
  options?: Options<ListDomainsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDomainsResponses,
    ListDomainsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains",
    ...options,
  });
};

/**
 * Create Domain
 */
export const createDomain = <ThrowOnError extends boolean = false>(
  options: Options<CreateDomainData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDomainResponses,
    CreateDomainErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Domain Rrsets
 */
export const getDomainRrsets = <ThrowOnError extends boolean = false>(
  options: Options<GetDomainRrsetsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDomainRrsetsResponses,
    GetDomainRrsetsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains/{domain_id}/rrsets",
    ...options,
  });
};

/**
 * Create Domain Rrsets
 */
export const createDomainRrsets = <ThrowOnError extends boolean = false>(
  options: Options<CreateDomainRrsetsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDomainRrsetsResponses,
    CreateDomainRrsetsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains/{domain_id}/rrsets",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Domain
 */
export const deleteDomain = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDomainData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDomainResponses,
    DeleteDomainErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains/{domain_id}",
    ...options,
  });
};

/**
 * Get Domain
 */
export const getDomain = <ThrowOnError extends boolean = false>(
  options: Options<GetDomainData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDomainResponses,
    GetDomainErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/domains/{domain_id}",
    ...options,
  });
};

/**
 * List Fabrics
 */
export const listFabrics = <ThrowOnError extends boolean = false>(
  options?: Options<ListFabricsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFabricsResponses,
    ListFabricsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics",
    ...options,
  });
};

/**
 * Create Fabric
 */
export const createFabric = <ThrowOnError extends boolean = false>(
  options: Options<CreateFabricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFabricResponses,
    CreateFabricErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Fabric
 */
export const deleteFabric = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFabricResponses,
    DeleteFabricErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}",
    ...options,
  });
};

/**
 * Get Fabric
 */
export const getFabric = <ThrowOnError extends boolean = false>(
  options: Options<GetFabricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFabricResponses,
    GetFabricErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}",
    ...options,
  });
};

/**
 * Update Fabric
 */
export const updateFabric = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFabricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFabricResponses,
    UpdateFabricErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Interfaces
 */
export const listInterfaces = <ThrowOnError extends boolean = false>(
  options: Options<ListInterfacesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListInterfacesResponses,
    ListInterfacesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{node_id}/interfaces",
    ...options,
  });
};

/**
 * List Fabric Vlan Subnet Iprange
 */
export const listFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFabricVlanSubnetIprangeResponses,
    ListFabricVlanSubnetIprangeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges",
    ...options,
  });
};

/**
 * Create Fabric Vlan Subnet Iprange
 */
export const createFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFabricVlanSubnetIprangeResponses,
    CreateFabricVlanSubnetIprangeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Fabric Vlan Subnet Iprange
 */
export const deleteFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFabricVlanSubnetIprangeResponses,
    DeleteFabricVlanSubnetIprangeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}",
    ...options,
  });
};

/**
 * Update Fabric Vlan Subnet Iprange
 */
export const updateFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFabricVlanSubnetIprangeResponses,
    UpdateFabricVlanSubnetIprangeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Fabric Vlan Subnet Iprange
 */
export const getFabricVlanSubnetIprange = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFabricVlanSubnetIprangeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFabricVlanSubnetIprangeResponses,
    GetFabricVlanSubnetIprangeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{id}",
    ...options,
  });
};

/**
 * Get Machine Power Parameters
 */
export const getMachinePowerParameters = <ThrowOnError extends boolean = false>(
  options: Options<GetMachinePowerParametersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMachinePowerParametersResponses,
    GetMachinePowerParametersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{system_id}/power_parameters",
    ...options,
  });
};

/**
 * List Machine Pci Devices
 */
export const listMachinePciDevices = <ThrowOnError extends boolean = false>(
  options: Options<ListMachinePciDevicesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListMachinePciDevicesResponses,
    ListMachinePciDevicesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{system_id}/pci_devices",
    ...options,
  });
};

/**
 * List Machine Usb Devices
 */
export const listMachineUsbDevices = <ThrowOnError extends boolean = false>(
  options: Options<ListMachineUsbDevicesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListMachineUsbDevicesResponses,
    ListMachineUsbDevicesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines/{system_id}/usb_devices",
    ...options,
  });
};

/**
 * List Machines
 */
export const listMachines = <ThrowOnError extends boolean = false>(
  options?: Options<ListMachinesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListMachinesResponses,
    ListMachinesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/machines",
    ...options,
  });
};

/**
 * List Notifications
 */
export const listNotifications = <ThrowOnError extends boolean = false>(
  options?: Options<ListNotificationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListNotificationsResponses,
    ListNotificationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/notifications",
    ...options,
  });
};

/**
 * Create Notification
 */
export const createNotification = <ThrowOnError extends boolean = false>(
  options: Options<CreateNotificationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateNotificationResponses,
    CreateNotificationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/notifications",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Notification
 */
export const deleteNotification = <ThrowOnError extends boolean = false>(
  options: Options<DeleteNotificationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteNotificationResponses,
    DeleteNotificationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/notifications/{notification_id}",
    ...options,
  });
};

/**
 * Get Notification
 */
export const getNotification = <ThrowOnError extends boolean = false>(
  options: Options<GetNotificationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetNotificationResponses,
    GetNotificationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/notifications/{notification_id}",
    ...options,
  });
};

/**
 * Update Notification
 */
export const updateNotification = <ThrowOnError extends boolean = false>(
  options: Options<UpdateNotificationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateNotificationResponses,
    UpdateNotificationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/notifications/{notification_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Dismiss Notification
 */
export const dismissNotification = <ThrowOnError extends boolean = false>(
  options: Options<DismissNotificationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DismissNotificationResponses,
    DismissNotificationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/notifications/{notification_id}:dismiss",
    ...options,
  });
};

/**
 * List Package Repositories
 */
export const listPackageRepositories = <ThrowOnError extends boolean = false>(
  options?: Options<ListPackageRepositoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListPackageRepositoriesResponses,
    ListPackageRepositoriesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/package_repositories",
    ...options,
  });
};

/**
 * Create Package Repository
 */
export const createPackageRepository = <ThrowOnError extends boolean = false>(
  options: Options<CreatePackageRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePackageRepositoryResponses,
    CreatePackageRepositoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/package_repositories",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Package Repository
 */
export const deletePackageRepository = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackageRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePackageRepositoryResponses,
    DeletePackageRepositoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/package_repositories/{package_repository_id}",
    ...options,
  });
};

/**
 * Get Package Repository
 */
export const getPackageRepository = <ThrowOnError extends boolean = false>(
  options: Options<GetPackageRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPackageRepositoryResponses,
    GetPackageRepositoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/package_repositories/{package_repository_id}",
    ...options,
  });
};

/**
 * Update Package Repository
 */
export const updatePackageRepository = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePackageRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePackageRepositoryResponses,
    UpdatePackageRepositoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/package_repositories/{package_repository_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Fabric Vlan Subnet Reserved Ips
 */
export const listFabricVlanSubnetReservedIps = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListFabricVlanSubnetReservedIpsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFabricVlanSubnetReservedIpsResponses,
    ListFabricVlanSubnetReservedIpsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips",
    ...options,
  });
};

/**
 * Create Fabric Vlan Subnet Reserved Ip
 */
export const createFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFabricVlanSubnetReservedIpResponses,
    CreateFabricVlanSubnetReservedIpErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Fabric Vlan Subnet Reserved Ip
 */
export const deleteFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFabricVlanSubnetReservedIpResponses,
    DeleteFabricVlanSubnetReservedIpErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}",
    ...options,
  });
};

/**
 * Update Fabric Vlan Subnet Reserved Ip
 */
export const updateFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFabricVlanSubnetReservedIpResponses,
    UpdateFabricVlanSubnetReservedIpErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Fabric Vlan Subnet Reserved Ip
 */
export const getFabricVlanSubnetReservedIp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFabricVlanSubnetReservedIpData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFabricVlanSubnetReservedIpResponses,
    GetFabricVlanSubnetReservedIpErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{reservedip_id}",
    ...options,
  });
};

/**
 * List Resource Pools
 */
export const listResourcePools = <ThrowOnError extends boolean = false>(
  options?: Options<ListResourcePoolsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListResourcePoolsResponses,
    ListResourcePoolsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools",
    ...options,
  });
};

/**
 * Create Resource Pool
 */
export const createResourcePool = <ThrowOnError extends boolean = false>(
  options: Options<CreateResourcePoolData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateResourcePoolResponses,
    CreateResourcePoolErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Resource Pool
 */
export const deleteResourcePool = <ThrowOnError extends boolean = false>(
  options: Options<DeleteResourcePoolData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteResourcePoolResponses,
    DeleteResourcePoolErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools/{resource_pool_id}",
    ...options,
  });
};

/**
 * Get Resource Pool
 */
export const getResourcePool = <ThrowOnError extends boolean = false>(
  options: Options<GetResourcePoolData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetResourcePoolResponses,
    GetResourcePoolErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools/{resource_pool_id}",
    ...options,
  });
};

/**
 * Update Resource Pool
 */
export const updateResourcePool = <ThrowOnError extends boolean = false>(
  options: Options<UpdateResourcePoolData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateResourcePoolResponses,
    UpdateResourcePoolErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools/{resource_pool_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List resource pools with a summary. ONLY FOR INTERNAL USAGE.
 * List resource pools with a summary. This endpoint is only for internal usage and might be changed or removed without notice.
 */
export const listResourcePoolsWithSummary = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListResourcePoolsWithSummaryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListResourcePoolsWithSummaryResponses,
    ListResourcePoolsWithSummaryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/resource_pools_with_summary",
    ...options,
  });
};

/**
 * List Fabric Vlan Subnet Staticroutes
 */
export const listFabricVlanSubnetStaticroutes = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListFabricVlanSubnetStaticroutesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFabricVlanSubnetStaticroutesResponses,
    ListFabricVlanSubnetStaticroutesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes",
    ...options,
  });
};

/**
 * Create Fabric Vlan Subnet Staticroute
 */
export const createFabricVlanSubnetStaticroute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateFabricVlanSubnetStaticrouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFabricVlanSubnetStaticrouteResponses,
    CreateFabricVlanSubnetStaticrouteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Fabric Vlan Subnet Staticroute
 */
export const deleteFabricVlanSubnetStaticroute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteFabricVlanSubnetStaticrouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFabricVlanSubnetStaticrouteResponses,
    DeleteFabricVlanSubnetStaticrouteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes/{id}",
    ...options,
  });
};

/**
 * Get Fabric Vlan Subnet Staticroute
 */
export const getFabricVlanSubnetStaticroute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFabricVlanSubnetStaticrouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFabricVlanSubnetStaticrouteResponses,
    GetFabricVlanSubnetStaticrouteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes/{id}",
    ...options,
  });
};

/**
 * Update Fabric Vlan Subnet Staticroute
 */
export const updateFabricVlanSubnetStaticroute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateFabricVlanSubnetStaticrouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFabricVlanSubnetStaticrouteResponses,
    UpdateFabricVlanSubnetStaticrouteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Spaces
 */
export const listSpaces = <ThrowOnError extends boolean = false>(
  options?: Options<ListSpacesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListSpacesResponses,
    ListSpacesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces",
    ...options,
  });
};

/**
 * Create Space
 */
export const createSpace = <ThrowOnError extends boolean = false>(
  options: Options<CreateSpaceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateSpaceResponses,
    CreateSpaceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Space
 */
export const deleteSpace = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSpaceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteSpaceResponses,
    DeleteSpaceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces/{space_id}",
    ...options,
  });
};

/**
 * Get Space
 */
export const getSpace = <ThrowOnError extends boolean = false>(
  options: Options<GetSpaceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSpaceResponses,
    GetSpaceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces/{space_id}",
    ...options,
  });
};

/**
 * Update Space
 */
export const updateSpace = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSpaceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateSpaceResponses,
    UpdateSpaceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/spaces/{space_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List User Sshkeys
 */
export const listUserSshkeys = <ThrowOnError extends boolean = false>(
  options?: Options<ListUserSshkeysData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUserSshkeysResponses,
    ListUserSshkeysErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys",
    ...options,
  });
};

/**
 * Create User Sshkeys
 */
export const createUserSshkeys = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserSshkeysData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserSshkeysResponses,
    CreateUserSshkeysErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete User Sshkey
 */
export const deleteUserSshkey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserSshkeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserSshkeyResponses,
    DeleteUserSshkeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys/{id}",
    ...options,
  });
};

/**
 * Get User Sshkey
 */
export const getUserSshkey = <ThrowOnError extends boolean = false>(
  options: Options<GetUserSshkeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserSshkeyResponses,
    GetUserSshkeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys/{sshkey_id}",
    ...options,
  });
};

/**
 * Import User Sshkeys
 */
export const importUserSshkeys = <ThrowOnError extends boolean = false>(
  options: Options<ImportUserSshkeysData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ImportUserSshkeysResponses,
    ImportUserSshkeysErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sshkeys:import",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get User Sslkeys
 */
export const getUserSslkeys = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserSslkeysData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserSslkeysResponses,
    GetUserSslkeysErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys",
    ...options,
  });
};

/**
 * Create User Sslkey
 */
export const createUserSslkey = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserSslkeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserSslkeyResponses,
    CreateUserSslkeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete User Sslkey
 */
export const deleteUserSslkey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserSslkeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserSslkeyResponses,
    DeleteUserSslkeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}",
    ...options,
  });
};

/**
 * Get User Sslkey
 */
export const getUserSslkey = <ThrowOnError extends boolean = false>(
  options: Options<GetUserSslkeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserSslkeyResponses,
    GetUserSslkeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}",
    ...options,
  });
};

/**
 * List sslkeys with a summary. ONLY FOR INTERNAL USAGE.
 * List sslkeys with a summary. This endpoint is only for internal usage and might be changed or removed without notice.
 */
export const getUserSslkeysWithSummary = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserSslkeysWithSummaryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserSslkeysWithSummaryResponses,
    GetUserSslkeysWithSummaryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me/sslkeys_with_summary",
    ...options,
  });
};

/**
 * List Fabric Vlan Subnets
 */
export const listFabricVlanSubnets = <ThrowOnError extends boolean = false>(
  options: Options<ListFabricVlanSubnetsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFabricVlanSubnetsResponses,
    ListFabricVlanSubnetsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets",
    ...options,
  });
};

/**
 * Create Fabric Vlan Subnet
 */
export const createFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<CreateFabricVlanSubnetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFabricVlanSubnetResponses,
    CreateFabricVlanSubnetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Fabric Vlan Subnet
 */
export const deleteFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricVlanSubnetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFabricVlanSubnetResponses,
    DeleteFabricVlanSubnetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}",
    ...options,
  });
};

/**
 * Update Fabric Vlan Subnet
 */
export const updateFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFabricVlanSubnetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFabricVlanSubnetResponses,
    UpdateFabricVlanSubnetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Fabric Vlan Subnet
 */
export const getFabricVlanSubnet = <ThrowOnError extends boolean = false>(
  options: Options<GetFabricVlanSubnetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFabricVlanSubnetResponses,
    GetFabricVlanSubnetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}",
    ...options,
  });
};

/**
 * List Tags
 */
export const listTags = <ThrowOnError extends boolean = false>(
  options?: Options<ListTagsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListTagsResponses,
    ListTagsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/tags",
    ...options,
  });
};

/**
 * Create Tag
 */
export const createTag = <ThrowOnError extends boolean = false>(
  options: Options<CreateTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTagResponses,
    CreateTagErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/tags",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Tag
 */
export const deleteTag = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTagResponses,
    DeleteTagErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/tags/{tag_id}",
    ...options,
  });
};

/**
 * Get Tag
 */
export const getTag = <ThrowOnError extends boolean = false>(
  options: Options<GetTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTagResponses,
    GetTagErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/tags/{tag_id}",
    ...options,
  });
};

/**
 * Update Tag
 */
export const updateTag = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTagResponses,
    UpdateTagErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/tags/{tag_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get user with a summary. ONLY FOR INTERNAL USAGE.
 * Get user with a summary. This endpoint is only for internal usage and might be changed or removed without notice.
 */
export const getMeWithSummary = <ThrowOnError extends boolean = false>(
  options?: Options<GetMeWithSummaryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMeWithSummaryResponses,
    GetMeWithSummaryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me_with_summary",
    ...options,
  });
};

/**
 * Get User Info
 */
export const getUserInfo = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserInfoData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserInfoResponses,
    GetUserInfoErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me",
    ...options,
  });
};

/**
 * Complete Intro
 */
export const completeIntro = <ThrowOnError extends boolean = false>(
  options?: Options<CompleteIntroData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    CompleteIntroResponses,
    CompleteIntroErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me:complete_intro",
    ...options,
  });
};

/**
 * Change Password User
 */
export const changePasswordUser = <ThrowOnError extends boolean = false>(
  options: Options<ChangePasswordUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ChangePasswordUserResponses,
    ChangePasswordUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/me:change_password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Users
 */
export const listUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ListUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUsersResponses,
    ListUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users",
    ...options,
  });
};

/**
 * Create User
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponses,
    CreateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete User
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponses,
    DeleteUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/{user_id}",
    ...options,
  });
};

/**
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserResponses,
    GetUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/{user_id}",
    ...options,
  });
};

/**
 * Update User
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponses,
    UpdateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/{user_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change Password Admin
 */
export const changePasswordAdmin = <ThrowOnError extends boolean = false>(
  options: Options<ChangePasswordAdminData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ChangePasswordAdminResponses,
    ChangePasswordAdminErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users/{user_id}:change_password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List users with a summary. ONLY FOR INTERNAL USAGE.
 * List users with a summary. This endpoint is only for internal usage and might be changed or removed without notice.
 */
export const listUsersWithSummary = <ThrowOnError extends boolean = false>(
  options?: Options<ListUsersWithSummaryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUsersWithSummaryResponses,
    ListUsersWithSummaryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/users_with_summary",
    ...options,
  });
};

/**
 * List Fabric Vlans
 */
export const listFabricVlans = <ThrowOnError extends boolean = false>(
  options: Options<ListFabricVlansData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFabricVlansResponses,
    ListFabricVlansErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans",
    ...options,
  });
};

/**
 * Create Fabric Vlan
 */
export const createFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<CreateFabricVlanData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFabricVlanResponses,
    CreateFabricVlanErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Fabric Vlan
 */
export const deleteFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricVlanData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFabricVlanResponses,
    DeleteFabricVlanErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}",
    ...options,
  });
};

/**
 * Get Fabric Vlan
 */
export const getFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<GetFabricVlanData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFabricVlanResponses,
    GetFabricVlanErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}",
    ...options,
  });
};

/**
 * Update Fabric Vlan
 */
export const updateFabricVlan = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFabricVlanData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFabricVlanResponses,
    UpdateFabricVlanErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Zones
 */
export const listZones = <ThrowOnError extends boolean = false>(
  options?: Options<ListZonesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListZonesResponses,
    ListZonesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones",
    ...options,
  });
};

/**
 * Create Zone
 */
export const createZone = <ThrowOnError extends boolean = false>(
  options: Options<CreateZoneData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateZoneResponses,
    CreateZoneErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Zone
 * Deletes a zone. All the resources belonging to this zone will be moved to the default zone.
 */
export const deleteZone = <ThrowOnError extends boolean = false>(
  options: Options<DeleteZoneData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteZoneResponses,
    DeleteZoneErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones/{zone_id}",
    ...options,
  });
};

/**
 * Get Zone
 */
export const getZone = <ThrowOnError extends boolean = false>(
  options: Options<GetZoneData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetZoneResponses,
    GetZoneErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones/{zone_id}",
    ...options,
  });
};

/**
 * Update Zone
 */
export const updateZone = <ThrowOnError extends boolean = false>(
  options: Options<UpdateZoneData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateZoneResponses,
    UpdateZoneErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones/{zone_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List zones with a summary. ONLY FOR INTERNAL USAGE.
 * List zones with a summary. This endpoint is only for internal usage and might be changed or removed without notice.
 */
export const listZonesWithSummary = <ThrowOnError extends boolean = false>(
  options?: Options<ListZonesWithSummaryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListZonesWithSummaryResponses,
    ListZonesWithSummaryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/MAAS/a/v3/zones_with_summary",
    ...options,
  });
};
