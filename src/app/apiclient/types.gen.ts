// This file is auto-generated by @hey-api/openapi-ts

/**
 * AAAARecord
 */
export type AaaaRecord = {
  /**
   * Address
   */
  address: string;
};

/**
 * AAAARecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type AaaaRecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Ipv6Address
   */
  ipv6address: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ARecord
 */
export type ARecord = {
  /**
   * Address
   */
  address: string;
};

/**
 * ARecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ARecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Ipv4Address
   */
  ipv4address: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * AccessTokenResponse
 * Content for a response returning a JWT.
 */
export type AccessTokenResponse = {
  /**
   * Token Type
   */
  token_type: string;
  /**
   * Access Token
   */
  access_token: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * BadRequestBodyResponse
 */
export type BadRequestBodyResponse = {
  /**
   * Code
   */
  code?: number;
  /**
   * Message
   */
  message?: string;
  /**
   * Details
   */
  details?: BaseExceptionDetail[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * BaseExceptionDetail
 */
export type BaseExceptionDetail = {
  /**
   * Type
   */
  type: string;
  /**
   * Message
   */
  message: string;
  /**
   * Field
   */
  field?: string;
  /**
   * Location
   */
  location?: string;
};

/**
 * BaseHal
 */
export type BaseHal = {
  self: BaseHref;
};

/**
 * BaseHref
 */
export type BaseHref = {
  /**
   * Href
   */
  href: string;
};

/**
 * Body_login
 */
export type BodyLogin = {
  /**
   * Grant Type
   */
  grant_type?: string;
  /**
   * Username
   */
  username: string;
  /**
   * Password
   */
  password: string;
  /**
   * Scope
   */
  scope?: string;
  /**
   * Client Id
   */
  client_id?: string;
  /**
   * Client Secret
   */
  client_secret?: string;
};

/**
 * CNAMERecord
 */
export type CnameRecord = {
  /**
   * Cname
   */
  cname: string;
};

/**
 * CNAMERecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type CnameRecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Cname
   */
  cname: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ComponentsToDisableEnum
 * An enumeration.
 */
export type ComponentsToDisableEnum = "multiverse" | "restricted" | "universe";

/**
 * ConfigurationResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ConfigurationResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Name
   */
  name: string;
  /**
   * Value
   */
  value?: unknown;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ConfigurationsListResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ConfigurationsListResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Items
   */
  items: ConfigurationResponse[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ConflictBodyResponse
 */
export type ConflictBodyResponse = {
  /**
   * Code
   */
  code?: number;
  /**
   * Message
   */
  message?: string;
  /**
   * Details
   */
  details?: BaseExceptionDetail[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * DNSResourceRecordSetRequest
 */
export type DnsResourceRecordSetRequest = {
  /**
   * Name
   */
  name: string;
  /**
   * Ttl
   */
  ttl?: number;
  rrtype: DnsResourceTypeEnum;
  /**
   * A Records
   */
  a_records?: ARecord[];
  /**
   * Aaaa Records
   */
  aaaa_records?: AaaaRecord[];
  cname_record?: CnameRecord;
  /**
   * Mx Records
   */
  mx_records?: MxRecord[];
  /**
   * Ns Records
   */
  ns_records?: NsRecord[];
  /**
   * Sshfp Records
   */
  sshfp_records?: SshfpRecord[];
  /**
   * Srv Records
   */
  srv_records?: SrvRecord[];
  /**
   * Txt Records
   */
  txt_records?: TxtRecord[];
};

/**
 * DNSResourceTypeEnum
 * An enumeration.
 */
export type DnsResourceTypeEnum =
  | "A"
  | "AAAA"
  | "CNAME"
  | "MX"
  | "NS"
  | "SRV"
  | "SSHFP"
  | "TXT";

/**
 * DiscoveriesListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type DiscoveriesListResponse = {
  /**
   * Items
   */
  items: DiscoveryResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * DiscoveryResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type DiscoveryResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Discovery Id
   */
  discovery_id?: string;
  /**
   * Neighbour Id
   */
  neighbour_id?: number;
  /**
   * Ip
   */
  ip?: string;
  /**
   * Mac Address
   */
  mac_address?: string;
  /**
   * Vid
   */
  vid?: number;
  /**
   * First Seen
   */
  first_seen?: string;
  /**
   * Last Seen
   */
  last_seen?: string;
  /**
   * Mdns Id
   */
  mdns_id?: number;
  /**
   * Hostname
   */
  hostname?: string;
  /**
   * Observer Id
   */
  observer_id?: number;
  /**
   * Observer System Id
   */
  observer_system_id?: string;
  /**
   * Observer Hostname
   */
  observer_hostname?: string;
  /**
   * Observer Interface Id
   */
  observer_interface_id?: number;
  /**
   * Observer Interface Name
   */
  observer_interface_name?: string;
  /**
   * Fabric Id
   */
  fabric_id?: number;
  /**
   * Fabric Name
   */
  fabric_name?: string;
  /**
   * Vlan Id
   */
  vlan_id?: number;
  /**
   * Is External Dhcp
   */
  is_external_dhcp?: boolean;
  /**
   * Subnet Id
   */
  subnet_id?: number;
  /**
   * Subnet Cidr
   */
  subnet_cidr?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * DomainRequest
 */
export type DomainRequest = {
  /**
   * Name
   * Name of the domain.
   */
  name: string;
  /**
   * Authoritative
   * Class type of the domain
   */
  authoritative?: boolean;
  /**
   * Ttl
   * TTL for the domain.
   */
  ttl?: number;
};

/**
 * DomainResourceRecordSetListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type DomainResourceRecordSetListResponse = {
  /**
   * Items
   */
  items: DomainResourceRecordSetResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * DomainResourceRecordSetResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type DomainResourceRecordSetResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Name
   */
  name: string;
  /**
   * Node Id
   */
  node_id?: number;
  /**
   * Ttl
   */
  ttl?: number;
  rrtype: DnsResourceTypeEnum;
  /**
   * A Records
   */
  a_records?: ARecordResponse[];
  /**
   * Aaaa Records
   */
  aaaa_records?: AaaaRecordResponse[];
  cname_record?: CnameRecordResponse;
  /**
   * Mx Records
   */
  mx_records?: MxRecordResponse[];
  /**
   * Ns Records
   */
  ns_records?: NsRecordResponse[];
  /**
   * Sshfp Records
   */
  sshfp_records?: SshfpRecordResponse[];
  /**
   * Srv Records
   */
  srv_records?: SrvRecordResponse[];
  /**
   * Txt Records
   */
  txt_records?: TxtRecordResponse[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * DomainResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type DomainResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Authoritative
   */
  authoritative: boolean;
  /**
   * Ttl
   */
  ttl?: number;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * DomainsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type DomainsListResponse = {
  /**
   * Items
   */
  items: DomainResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * EventResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type EventResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Created
   */
  created: string;
  /**
   * Updated
   */
  updated: string;
  type: EventTypeResponse;
  /**
   * Node System Id
   */
  node_system_id?: string;
  /**
   * Node Hostname
   */
  node_hostname: string;
  /**
   * User Id
   */
  user_id?: number;
  /**
   * Owner
   */
  owner: string;
  /**
   * Ip Address
   */
  ip_address?: string;
  /**
   * User Agent
   */
  user_agent: string;
  /**
   * Description
   */
  description: string;
  /**
   * Action
   */
  action: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * EventTypeLevelEnum
 * An enumeration.
 */
export type EventTypeLevelEnum =
  | "AUDIT"
  | "CRITICAL"
  | "DEBUG"
  | "ERROR"
  | "INFO"
  | "WARNING";

/**
 * EventTypeResponse
 */
export type EventTypeResponse = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  level: EventTypeLevelEnum;
};

/**
 * EventsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type EventsListResponse = {
  /**
   * Items
   */
  items: EventResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * FabricRequest
 */
export type FabricRequest = {
  /**
   * Name
   * The unique name of the entity.
   */
  name: string;
  /**
   * Description
   * The description of the fabric.
   */
  description?: string;
  /**
   * Class Type
   */
  class_type?: string;
};

/**
 * FabricResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type FabricResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name?: string;
  /**
   * Description
   */
  description?: string;
  /**
   * Class Type
   */
  class_type?: string;
  vlans: BaseHref;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * FabricsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type FabricsListResponse = {
  /**
   * Items
   */
  items: FabricResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * HardwareDeviceTypeEnum
 * An enumeration.
 */
export type HardwareDeviceTypeEnum = 0 | 1 | 2 | 3 | 4 | 5;

/**
 * IPRangeCreateRequest
 */
export type IpRangeCreateRequest = {
  /**
   * Type of this range.
   */
  type: IpRangeType;
  /**
   * Start Ip
   * Start IP address of this range (inclusive).
   */
  start_ip: string;
  /**
   * End Ip
   * Last IP address of this range (inclusive).
   */
  end_ip: string;
  /**
   * Comment
   * A description of this range.
   */
  comment?: string;
  /**
   * Owner Id
   * The owner of this range.
   */
  owner_id?: number;
};

/**
 * IPRangeListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type IpRangeListResponse = {
  /**
   * Items
   */
  items: IpRangeResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * IPRangeResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type IpRangeResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  type: IpRangeType;
  /**
   * Start Ip
   */
  start_ip: string;
  /**
   * End Ip
   */
  end_ip: string;
  /**
   * Comment
   */
  comment?: string;
  /**
   * Owner Id
   */
  owner_id: number;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * IPRangeType
 * The vocabulary of possible types of `IPRange` objects.
 */
export type IpRangeType = "dynamic" | "reserved";

/**
 * IPRangeUpdateRequest
 */
export type IpRangeUpdateRequest = {
  /**
   * Type of this range.
   */
  type: IpRangeType;
  /**
   * Start Ip
   * Start IP address of this range (inclusive).
   */
  start_ip: string;
  /**
   * End Ip
   * Last IP address of this range (inclusive).
   */
  end_ip: string;
  /**
   * Comment
   * A description of this range.
   */
  comment?: string;
  /**
   * Owner Id
   * The owner of this range.
   */
  owner_id: number;
};

/**
 * InterfaceLinkType
 * The vocabulary of possible types to link a `Subnet` to a `Interface`.
 */
export type InterfaceLinkType = "auto" | "dhcp" | "link_up" | "static";

/**
 * InterfaceListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type InterfaceListResponse = {
  /**
   * Items
   */
  items: InterfaceResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * InterfaceResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type InterfaceResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  type: InterfaceType;
  /**
   * Mac Address
   */
  mac_address?: string;
  /**
   * Link Connected
   */
  link_connected?: boolean;
  /**
   * Interface Speed
   */
  interface_speed?: number;
  /**
   * Enabled
   */
  enabled?: boolean;
  /**
   * Link Speed
   */
  link_speed?: number;
  /**
   * Sriov Max Vf
   */
  sriov_max_vf?: number;
  /**
   * Links
   */
  links?: LinkResponse[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * InterfaceType
 * The vocabulary of possible types for `Interface`.
 */
export type InterfaceType =
  | "alias"
  | "bond"
  | "bridge"
  | "physical"
  | "unknown"
  | "vlan";

/**
 * KnownArchesEnum
 * An enumeration.
 */
export type KnownArchesEnum =
  | "amd64"
  | "arm64"
  | "armhf"
  | "i386"
  | "ppc64el"
  | "s390x";

/**
 * KnownComponentsEnum
 * An enumeration.
 */
export type KnownComponentsEnum =
  | "main"
  | "multiverse"
  | "restricted"
  | "universe";

/**
 * LinkResponse
 */
export type LinkResponse = {
  /**
   * Id
   */
  id: number;
  mode: InterfaceLinkType;
  /**
   * Ip Address
   */
  ip_address?: string;
};

/**
 * MXRecord
 */
export type MxRecord = {
  /**
   * Preference
   */
  preference: number;
  /**
   * Exchange
   */
  exchange: string;
};

/**
 * MXRecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type MxRecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Exchange
   */
  exchange: string;
  /**
   * Preference
   */
  preference: number;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * MachineResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type MachineResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * System Id
   */
  system_id: string;
  /**
   * Description
   */
  description: string;
  /**
   * Owner
   */
  owner?: string;
  /**
   * Cpu Speed Mhz
   */
  cpu_speed_MHz: number;
  /**
   * Memory Mib
   */
  memory_MiB: number;
  /**
   * Osystem
   */
  osystem: string;
  /**
   * Architecture
   */
  architecture?: string;
  /**
   * Distro Series
   */
  distro_series: string;
  /**
   * Hwe Kernel
   */
  hwe_kernel?: string;
  /**
   * Locked
   */
  locked: boolean;
  /**
   * Cpu Count
   */
  cpu_count: number;
  status: NodeStatus;
  power_type?: PowerTypeEnum;
  /**
   * Fqdn
   */
  fqdn: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * MachinesListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type MachinesListResponse = {
  /**
   * Items
   */
  items: MachineResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * NSRecord
 */
export type NsRecord = {
  /**
   * Nsdname
   */
  nsdname: string;
};

/**
 * NSRecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type NsRecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Nsdname
   */
  nsdname: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * NodeStatus
 * The vocabulary of a `Node`'s possible statuses.
 */
export type NodeStatus =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22;

/**
 * NotFoundBodyResponse
 */
export type NotFoundBodyResponse = {
  /**
   * Code
   */
  code?: number;
  /**
   * Message
   */
  message?: string;
  /**
   * Details
   */
  details?: BaseExceptionDetail[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * NotificationCategoryEnum
 * An enumeration.
 */
export type NotificationCategoryEnum = "error" | "info" | "success" | "warning";

/**
 * NotificationRequest
 */
export type NotificationRequest = {
  /**
   * Message
   * The message for this notification. May contain basic HTML,such as formatting. This string will be sanitised before display sothat it doesn't break MAAS HTML.
   */
  message: string;
  /**
   * Choose from: ``error``,``warning``, ``success``, or ``info``. Defaults to ``info``.
   */
  category?: NotificationCategoryEnum;
  /**
   * Ident
   * Unique identifier for this notification.
   */
  ident?: string;
  /**
   * User Id
   * User ID this notification is intended for.By default it will not be targeted to any individual user.
   */
  user_id?: number;
  /**
   * For Users
   * True to notify all users,defaults to false, i.e. not targeted to all users.
   */
  for_users?: boolean;
  /**
   * For Admins
   * True to notify all admins,defaults to false, i.e. not targeted to all admins.
   */
  for_admins?: boolean;
  /**
   * Context
   * Optional JSON context. The root object *must* be an object(i.e. a mapping). The values herein can be referenced by ``message``with Python's 'format' (not %) codes.
   */
  context?: Record<string, unknown>;
  /**
   * Dismissable
   * Wheter this notification can be dismissed or not. Defaults to True.
   */
  dismissable?: boolean;
};

/**
 * NotificationResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type NotificationResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Ident
   */
  ident?: string;
  /**
   * Users
   */
  users: boolean;
  /**
   * Admins
   */
  admins: boolean;
  /**
   * Message
   */
  message: string;
  /**
   * Context
   */
  context: Record<string, unknown>;
  /**
   * User Id
   */
  user_id?: number;
  /**
   * Category
   */
  category: string;
  /**
   * Dismissable
   */
  dismissable: boolean;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * NotificationsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type NotificationsListResponse = {
  /**
   * Items
   */
  items: NotificationResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * PackageRepositoryCreateRequest
 */
export type PackageRepositoryCreateRequest = {
  /**
   * Name
   * The name of the package repository.
   */
  name: string;
  /**
   * Key
   * The authentication key to use with the repository.
   */
  key?: string;
  /**
   * Url
   * The url of the package repository.
   */
  url: string;
  /**
   * Distributions
   * Which package distribution to include.
   */
  distributions?: string[];
  /**
   * The list of components to enable.Only applicable to custom repositories.
   */
  components?: KnownComponentsEnum[];
  /**
   * The list of supported architectures.
   */
  arches?: KnownArchesEnum[];
  /**
   * The list of pockets to disable.
   */
  disabled_pockets?: PocketsToDisableEnum[];
  /**
   * The list of components to disable.Only applicable to the default Ubuntu repositories.
   */
  disabled_components?: ComponentsToDisableEnum[];
  /**
   * Disable Sources
   * Disable deb-src lines.
   */
  disable_sources: boolean;
  /**
   * Enabled
   * Whether or not the repository is enabled.
   */
  enabled?: boolean;
};

/**
 * PackageRepositoryListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type PackageRepositoryListResponse = {
  /**
   * Items
   */
  items: PackageRepositoryResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * PackageRepositoryResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type PackageRepositoryResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Key
   */
  key: string;
  /**
   * Url
   */
  url: string;
  /**
   * Distributions
   */
  distributions: string[];
  /**
   * Components
   */
  components: string[];
  /**
   * Arches
   */
  arches: string[];
  /**
   * Disabled Pockets
   */
  disabled_pockets: string[];
  /**
   * Disabled Components
   */
  disabled_components: string[];
  /**
   * Disable Sources
   */
  disable_sources: boolean;
  /**
   * Enabled
   */
  enabled: boolean;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * PackageRepositoryUpdateRequest
 */
export type PackageRepositoryUpdateRequest = {
  /**
   * Name
   * The name of the package repository.
   */
  name: string;
  /**
   * Key
   * The authentication key to use with the repository.
   */
  key?: string;
  /**
   * Url
   * The url of the package repository.
   */
  url: string;
  /**
   * Distributions
   * Which package distribution to include.
   */
  distributions?: string[];
  /**
   * The list of components to enable.Only applicable to custom repositories.
   */
  components?: KnownComponentsEnum[];
  /**
   * The list of supported architectures.
   */
  arches?: KnownArchesEnum[];
  /**
   * The list of pockets to disable.
   */
  disabled_pockets?: PocketsToDisableEnum[];
  /**
   * The list of components to disable.Only applicable to the default Ubuntu repositories.
   */
  disabled_components?: ComponentsToDisableEnum[];
  /**
   * Disable Sources
   * Disable deb-src lines.
   */
  disable_sources: boolean;
  /**
   * Enabled
   * Whether or not the repository is enabled.
   */
  enabled?: boolean;
};

/**
 * PciDeviceResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type PciDeviceResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  type: HardwareDeviceTypeEnum;
  /**
   * Vendor Id
   */
  vendor_id: string;
  /**
   * Product Id
   */
  product_id: string;
  /**
   * Vendor Name
   */
  vendor_name: string;
  /**
   * Product Name
   */
  product_name: string;
  /**
   * Commissioning Driver
   */
  commissioning_driver: string;
  /**
   * Bus Number
   */
  bus_number: number;
  /**
   * Device Number
   */
  device_number: number;
  /**
   * Pci Address
   */
  pci_address: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * PciDevicesListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type PciDevicesListResponse = {
  /**
   * Items
   */
  items: PciDeviceResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * PocketsToDisableEnum
 * An enumeration.
 */
export type PocketsToDisableEnum = "backports" | "security" | "updates";

/**
 * PowerDriverResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type PowerDriverResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  power_type: PowerTypeEnum;
  /**
   * Power Parameters
   */
  power_parameters: Record<string, unknown>;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * PowerTypeEnum
 * An enumeration.
 */
export type PowerTypeEnum =
  | "amt"
  | "apc"
  | "dli"
  | "eaton"
  | "hmc"
  | "hmcz"
  | "ipmi"
  | "lxd"
  | "manual"
  | "moonshot"
  | "mscm"
  | "msftocs"
  | "nova"
  | "openbmc"
  | "proxmox"
  | "raritan"
  | "recs_box"
  | "redfish"
  | "sm15k"
  | "ucsm"
  | "virsh"
  | "vmware"
  | "webhook"
  | "wedge";

/**
 * PreconditionFailedBodyResponse
 */
export type PreconditionFailedBodyResponse = {
  /**
   * Code
   */
  code?: number;
  /**
   * Message
   */
  message?: string;
  /**
   * Details
   */
  details?: BaseExceptionDetail[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * PublicConfigName
 * An enumeration.
 */
export type PublicConfigName =
  | "active_discovery_interval"
  | "auto_vlan_creation"
  | "boot_images_auto_import"
  | "boot_images_no_proxy"
  | "commissioning_distro_series"
  | "completed_intro"
  | "curtin_verbose"
  | "default_boot_interface_link_type"
  | "default_distro_series"
  | "default_dns_ttl"
  | "default_min_hwe_kernel"
  | "default_osystem"
  | "default_storage_layout"
  | "disk_erase_with_quick_erase"
  | "disk_erase_with_secure_erase"
  | "dns_trusted_acl"
  | "dnssec_validation"
  | "enable_analytics"
  | "enable_disk_erasing_on_release"
  | "enable_kernel_crash_dump"
  | "enable_third_party_drivers"
  | "enlist_commissioning"
  | "force_v1_network_yaml"
  | "hardware_sync_interval"
  | "kernel_opts"
  | "maas_auto_ipmi_cipher_suite_id"
  | "maas_auto_ipmi_k_g_bmc_key"
  | "maas_auto_ipmi_user_privilege_level"
  | "maas_auto_ipmi_user"
  | "maas_auto_ipmi_workaround_flags"
  | "maas_internal_domain"
  | "maas_name"
  | "maas_proxy_port"
  | "maas_syslog_port"
  | "max_node_commissioning_results"
  | "max_node_installation_results"
  | "max_node_release_results"
  | "max_node_testing_results"
  | "node_timeout"
  | "prefer_v4_proxy"
  | "prometheus_enabled"
  | "prometheus_push_gateway"
  | "prometheus_push_interval"
  | "promtail_enabled"
  | "promtail_port"
  | "release_notifications"
  | "remote_syslog"
  | "session_length"
  | "subnet_ip_exhaustion_threshold_count"
  | "theme"
  | "tls_cert_expiration_notification_enabled"
  | "tls_cert_expiration_notification_interval"
  | "upstream_dns"
  | "use_peer_proxy"
  | "use_rack_proxy"
  | "vcenter_datacenter"
  | "vcenter_password"
  | "vcenter_server"
  | "vcenter_username";

/**
 * RdnsMode
 * The vocabulary of a `Subnet`'s possible reverse DNS modes.
 */
export type RdnsMode = 0 | 1 | 2;

/**
 * ReservedIPCreateRequest
 */
export type ReservedIpCreateRequest = {
  /**
   * Ip
   * The IP to be reserved.
   */
  ip: string;
  /**
   * Mac Address
   * The MAC address that should be linked to the reserved IP.
   */
  mac_address: string;
  /**
   * Comment
   * A description of this reserved IP.
   */
  comment?: string;
};

/**
 * ReservedIPResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ReservedIpResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Ip
   */
  ip: string;
  /**
   * Mac Address
   */
  mac_address: string;
  /**
   * Comment
   */
  comment?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ReservedIPUpdateRequest
 */
export type ReservedIpUpdateRequest = {
  /**
   * Ip
   * The IP to be reserved.
   */
  ip: string;
  /**
   * Mac Address
   * The MAC address that should be linked to the reserved IP.
   */
  mac_address: string;
  /**
   * Comment
   * A description of this reserved IP.
   */
  comment?: string;
};

/**
 * ReservedIPsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ReservedIpsListResponse = {
  /**
   * Items
   */
  items: ReservedIpResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ResourcePoolPermission
 * An enumeration.
 */
export type ResourcePoolPermission = "delete" | "edit";

/**
 * ResourcePoolRequest
 */
export type ResourcePoolRequest = {
  /**
   * Name
   * The unique name of the entity.
   */
  name: string;
  /**
   * Description
   */
  description?: string;
};

/**
 * ResourcePoolResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ResourcePoolResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ResourcePoolWithSummaryResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ResourcePoolWithSummaryResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Kind
   */
  kind?: string;
  /**
   * Machine Total Count
   */
  machine_total_count: number;
  /**
   * Machine Ready Count
   */
  machine_ready_count: number;
  /**
   * Is Default
   */
  is_default: boolean;
  permissions: ResourcePoolPermission[];
};

/**
 * ResourcePoolsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ResourcePoolsListResponse = {
  /**
   * Items
   */
  items: ResourcePoolResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ResourcePoolsWithSummaryListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ResourcePoolsWithSummaryListResponse = {
  /**
   * Items
   */
  items: ResourcePoolWithSummaryResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SRVRecord
 */
export type SrvRecord = {
  /**
   * Priority
   */
  priority: number;
  /**
   * Weight
   */
  weight: number;
  /**
   * Port
   */
  port: number;
  /**
   * Target
   */
  target: string;
};

/**
 * SRVRecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SrvRecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Port
   */
  port: number;
  /**
   * Priority
   */
  priority: number;
  /**
   * Target
   */
  target: string;
  /**
   * Weight
   */
  weight: number;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SSHFPRecord
 */
export type SshfpRecord = {
  /**
   * Algorithm
   */
  algorithm: number;
  /**
   * Fingerprint Type
   */
  fingerprint_type: number;
  /**
   * Fingerprint
   */
  fingerprint: string;
};

/**
 * SSHFPRecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SshfpRecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Algorithm
   */
  algorithm: number;
  /**
   * Fingerprint Type
   */
  fingerprint_type: number;
  /**
   * Fingerprint
   */
  fingerprint: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SSLKeyListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SslKeyListResponse = {
  /**
   * Items
   */
  items: SslKeyResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SSLKeyRequest
 */
export type SslKeyRequest = {
  /**
   * Key
   * A valid SSL key.
   */
  key: string;
};

/**
 * SSLKeyResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SslKeyResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Key
   */
  key: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SSLKeyWithSummaryResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SslKeyWithSummaryResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Key
   */
  key: string;
  /**
   * Kind
   */
  kind?: string;
  /**
   * Display
   */
  display: string;
};

/**
 * SSLKeysWithSummaryListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SslKeysWithSummaryListResponse = {
  /**
   * Items
   */
  items: SslKeyWithSummaryResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SpaceRequest
 */
export type SpaceRequest = {
  /**
   * Name
   * The unique name of the entity.
   */
  name: string;
  /**
   * Description
   * The description of the zone.
   */
  description?: string;
};

/**
 * SpaceResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SpaceResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name?: string;
  /**
   * Description
   */
  description?: string;
  vlans: BaseHref;
  subnets: BaseHref;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SpacesListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SpacesListResponse = {
  /**
   * Items
   */
  items: SpaceResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SshKeyImportFromSourceRequest
 */
export type SshKeyImportFromSourceRequest = {
  /**
   * The source from where to fetch the key.
   */
  protocol: SshKeysProtocolType;
  /**
   * Auth Id
   * The username related to the source.
   */
  auth_id: string;
};

/**
 * SshKeyManualUploadRequest
 */
export type SshKeyManualUploadRequest = {
  /**
   * Key
   * The SSH public key to be added.
   */
  key: string;
};

/**
 * SshKeyResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SshKeyResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Key
   */
  key: string;
  protocol?: SshKeysProtocolType;
  /**
   * Auth Id
   */
  auth_id?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SshKeysListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SshKeysListResponse = {
  /**
   * Items
   */
  items: SshKeyResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SshKeysProtocolType
 * An enumeration.
 */
export type SshKeysProtocolType = "gh" | "lp";

/**
 * StaticRouteRequest
 */
export type StaticRouteRequest = {
  /**
   * Gateway Ip
   * IP address of the gateway on the source subnet.
   */
  gateway_ip: string;
  /**
   * Destination Id
   * Destination subnet ID for the route.
   */
  destination_id: number;
  /**
   * Metric
   * Weight of the route on a deployed machine.
   */
  metric?: number;
};

/**
 * StaticRouteResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type StaticRouteResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Destination Id
   */
  destination_id: number;
  /**
   * Gateway Ip
   */
  gateway_ip: string;
  /**
   * Metric
   */
  metric: number;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * StaticRoutesListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type StaticRoutesListResponse = {
  /**
   * Items
   */
  items: StaticRouteResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SubnetRequest
 */
export type SubnetRequest = {
  /**
   * Name
   * The unique name of the entity.
   */
  name?: string;
  /**
   * Description
   * The description of the subnet.
   */
  description?: string;
  /**
   * Cidr
   * The network CIDR for this subnet.
   */
  cidr: string;
  /**
   * How reverse DNS is handled for this subnet. One of:- ``0`` Disabled: No reverse zone is created.- ``1`` Enabled: Generate reverse zone.- ``2`` RFC2317: Extends '1' to create the necessary parent zone with the appropriate CNAME resource records for the network, if the network is small enough to require the support described in RFC2317.
   */
  rdns_mode?: RdnsMode;
  /**
   * Gateway Ip
   * The gateway IP for this subnet.
   */
  gateway_ip?: string;
  /**
   * Dns Servers
   * List of DNS servers for the subnet.
   */
  dns_servers?: string[];
  /**
   * Allow Dns
   * Configure MAAS DNS to allow DNS resolution in this subnet.
   */
  allow_dns?: boolean;
  /**
   * Allow Proxy
   * Configure maas-proxy to allow requests from this subnet.
   */
  allow_proxy?: boolean;
  /**
   * Active Discovery
   * Whether to allow active discovery in the subnet.
   */
  active_discovery?: boolean;
  /**
   * Managed
   * Whether this subnet is managed by MAAS or not.
   */
  managed?: boolean;
  /**
   * Disabled Boot Architectures
   * List of disabled boot architectures for this subnet.
   */
  disabled_boot_architectures?: string[];
};

/**
 * SubnetResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SubnetResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name?: string;
  /**
   * Description
   */
  description?: string;
  /**
   * Cidr
   */
  cidr: string;
  rdns_mode: RdnsMode;
  /**
   * Gateway Ip
   */
  gateway_ip?: string;
  /**
   * Dns Servers
   */
  dns_servers?: string[];
  /**
   * Allow Dns
   */
  allow_dns: boolean;
  /**
   * Allow Proxy
   */
  allow_proxy: boolean;
  /**
   * Active Discovery
   */
  active_discovery: boolean;
  /**
   * Managed
   */
  managed: boolean;
  /**
   * Disabled Boot Architectures
   */
  disabled_boot_architectures: string[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * SubnetsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SubnetsListResponse = {
  /**
   * Items
   */
  items: SubnetResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * TXTRecord
 */
export type TxtRecord = {
  /**
   * Data
   */
  data: string;
};

/**
 * TXTRecordResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type TxtRecordResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Data
   */
  data: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * TagRequest
 */
export type TagRequest = {
  /**
   * Name
   * The new tag name. Because the name will be used in urls, it should be short.
   */
  name: string;
  /**
   * Definition
   * An XPATH query that is evaluated againstthe hardware_details stored for all nodes (i.e. the output of ``lshw -xml``).
   */
  definition?: string;
  /**
   * Comment
   * A description of what fhe tag will be used for in natural language.
   */
  comment?: string;
  /**
   * Kernel Opts
   * Nodes associated with this tag will add this string to their kernel options when booting. The value overrides the global ``kernel_opts`` setting. If more than one tag is associated with a node, command line will be concatenated from all associated tags, in alphabetic tag name order.
   */
  kernel_opts?: string;
};

/**
 * TagResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type TagResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Comment
   */
  comment: string;
  /**
   * Definition
   */
  definition: string;
  /**
   * Kernel Opts
   */
  kernel_opts: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * TagsListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type TagsListResponse = {
  /**
   * Items
   */
  items: TagResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * UnauthorizedBodyResponse
 */
export type UnauthorizedBodyResponse = {
  /**
   * Code
   */
  code?: number;
  /**
   * Message
   */
  message?: string;
  /**
   * Details
   */
  details?: BaseExceptionDetail[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * UpdateConfigurationRequest
 */
export type UpdateConfigurationRequest = {
  /**
   * Value
   * The value of the configuration.
   */
  value?: unknown;
};

/**
 * UsbDeviceResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type UsbDeviceResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  type: HardwareDeviceTypeEnum;
  /**
   * Vendor Id
   */
  vendor_id: string;
  /**
   * Product Id
   */
  product_id: string;
  /**
   * Vendor Name
   */
  vendor_name: string;
  /**
   * Product Name
   */
  product_name: string;
  /**
   * Commissioning Driver
   */
  commissioning_driver: string;
  /**
   * Bus Number
   */
  bus_number: number;
  /**
   * Device Number
   */
  device_number: number;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * UsbDevicesListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type UsbDevicesListResponse = {
  /**
   * Items
   */
  items: UsbDeviceResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * UserChangePasswordRequest
 */
export type UserChangePasswordRequest = {
  /**
   * Password
   */
  password: string;
};

/**
 * UserCreateRequest
 */
export type UserCreateRequest = {
  /**
   * Username
   */
  username: string;
  /**
   * Is Superuser
   */
  is_superuser: boolean;
  /**
   * First Name
   */
  first_name: string;
  /**
   * Last Name
   */
  last_name: string;
  /**
   * Email
   */
  email?: string;
  /**
   * Password
   */
  password: string;
};

/**
 * UserInfoResponse
 */
export type UserInfoResponse = {
  /**
   * Id
   */
  id: number;
  /**
   * Username
   */
  username: string;
  /**
   * Is Superuser
   */
  is_superuser: boolean;
};

/**
 * UserResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type UserResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Username
   */
  username: string;
  /**
   * Is Superuser
   */
  is_superuser: boolean;
  /**
   * First Name
   */
  first_name: string;
  /**
   * Last Name
   */
  last_name?: string;
  /**
   * Date Joined
   */
  date_joined: string;
  /**
   * Email
   */
  email?: string;
  /**
   * Last Login
   */
  last_login?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * UserUpdateRequest
 */
export type UserUpdateRequest = {
  /**
   * Username
   */
  username: string;
  /**
   * Is Superuser
   */
  is_superuser: boolean;
  /**
   * First Name
   */
  first_name: string;
  /**
   * Last Name
   */
  last_name: string;
  /**
   * Email
   */
  email?: string;
  /**
   * Password
   */
  password?: string;
};

/**
 * UserWithSummaryResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type UserWithSummaryResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Completed Intro
   */
  completed_intro: boolean;
  /**
   * Email
   */
  email?: string;
  /**
   * Is Local
   */
  is_local: boolean;
  /**
   * Is Superuser
   */
  is_superuser: boolean;
  /**
   * Last Name
   */
  last_name?: string;
  /**
   * Last Login
   */
  last_login?: string;
  /**
   * Machines Count
   */
  machines_count: number;
  /**
   * Sshkeys Count
   */
  sshkeys_count: number;
  /**
   * Username
   */
  username: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * UsersListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type UsersListResponse = {
  /**
   * Items
   */
  items: UserResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * UsersWithSummaryListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type UsersWithSummaryListResponse = {
  /**
   * Items
   */
  items: UserWithSummaryResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ValidationErrorBodyResponse
 */
export type ValidationErrorBodyResponse = {
  /**
   * Code
   */
  code?: number;
  /**
   * Message
   */
  message?: string;
  /**
   * Details
   */
  details?: BaseExceptionDetail[];
  /**
   * Kind
   */
  kind?: string;
};

/**
 * VlanCreateRequest
 */
export type VlanCreateRequest = {
  /**
   * Name
   * The unique name of the entity.
   */
  name?: string;
  /**
   * Description
   * The description of the VLAN.
   */
  description?: string;
  /**
   * Vid
   * The VLAN ID of the VLAN. Valid values are within the range [0, 4094].
   */
  vid?: number;
  /**
   * Mtu
   * The MTU to use on the VLAN. Valid values are within the range [552, 65535].
   */
  mtu?: number;
  /**
   * Space Id
   * The space this VLAN should be placed in. If not specified, the VLAN will be placed in the 'undefined' space.
   */
  space_id?: number;
};

/**
 * VlanResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type VlanResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Vid
   */
  vid: number;
  /**
   * Name
   */
  name?: string;
  /**
   * Description
   */
  description: string;
  /**
   * Mtu
   */
  mtu: number;
  /**
   * Dhcp On
   */
  dhcp_on: boolean;
  /**
   * External Dhcp
   */
  external_dhcp?: string;
  /**
   * Primary Rack
   */
  primary_rack?: number;
  /**
   * Secondary Rack
   */
  secondary_rack?: number;
  /**
   * Relay Vlan Id
   */
  relay_vlan_id?: number;
  space?: BaseHref;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * VlanUpdateRequest
 */
export type VlanUpdateRequest = {
  /**
   * Name
   * The unique name of the entity.
   */
  name?: string;
  /**
   * Description
   * The description of the VLAN.
   */
  description?: string;
  /**
   * Vid
   * The VLAN ID of the VLAN. Valid values are within the range [0, 4094].
   */
  vid?: number;
  /**
   * Mtu
   * The MTU to use on the VLAN. Valid values are within the range [552, 65535].
   */
  mtu?: number;
  /**
   * Space Id
   * The space this VLAN should be placed in. If not specified, the VLAN will be placed in the 'undefined' space.
   */
  space_id?: number;
  /**
   * Fabric Id
   * Fabric ID containing the VLAN.
   */
  fabric_id: number;
  /**
   * Dhcp On
   * Whether or not DHCP should be managed on the VLAN.
   */
  dhcp_on: boolean;
  /**
   * Primary Rack Id
   * The primary rack controller ID managing the VLAN.
   */
  primary_rack_id?: number;
  /**
   * Secondary Rack Id
   * The secondary rack controller ID managing the VLAN
   */
  secondary_rack_id?: number;
  /**
   * Relay Vlan Id
   * Relay VLAN ID. Only set when this VLAN will be using a DHCP relay to forward DHCP requests to another VLAN that MAAS is managing. MAAS will not run the DHCP relay itself, it must be configured to proxy reqests to the primary and/or secondary rack controller interfaces for the VLAN specified in this field.
   */
  relay_vlan_id?: number;
};

/**
 * VlansListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type VlansListResponse = {
  /**
   * Items
   */
  items: VlanResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ZoneRequest
 */
export type ZoneRequest = {
  /**
   * Name
   * The unique name of the entity.
   */
  name: string;
  /**
   * Description
   * The description of the zone.
   */
  description?: string;
};

/**
 * ZoneResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ZoneResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ZoneWithSummaryResponse
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ZoneWithSummaryResponse = {
  _links?: BaseHal;
  /**
   *  Embedded
   */
  _embedded?: Record<string, unknown>;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Devices Count
   */
  devices_count: number;
  /**
   * Machines Count
   */
  machines_count: number;
  /**
   * Controllers Count
   */
  controllers_count: number;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ZonesListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ZonesListResponse = {
  /**
   * Items
   */
  items: ZoneResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

/**
 * ZonesWithSummaryListResponse
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ZonesWithSummaryListResponse = {
  /**
   * Items
   */
  items: ZoneWithSummaryResponse[];
  /**
   * Total
   */
  total: number;
  /**
   * Next
   */
  next?: string;
  /**
   * Kind
   */
  kind?: string;
};

export type AccessTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/auth/access_token";
};

export type AccessTokenErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type AccessTokenError = AccessTokenErrors[keyof AccessTokenErrors];

export type AccessTokenResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type AccessTokenResponse2 =
  AccessTokenResponses[keyof AccessTokenResponses];

export type LoginData = {
  body: BodyLogin;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/auth/login";
};

export type LoginErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type GetConfigurationData = {
  body?: never;
  path: {
    name: PublicConfigName;
  };
  query?: never;
  url: "/MAAS/a/v3/configurations/{name}";
};

export type GetConfigurationErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetConfigurationError =
  GetConfigurationErrors[keyof GetConfigurationErrors];

export type GetConfigurationResponses = {
  /**
   * Successful Response
   */
  200: ConfigurationResponse;
};

export type GetConfigurationResponse =
  GetConfigurationResponses[keyof GetConfigurationResponses];

export type SetConfigurationData = {
  body: UpdateConfigurationRequest;
  path: {
    name: PublicConfigName;
  };
  query?: never;
  url: "/MAAS/a/v3/configurations/{name}";
};

export type SetConfigurationErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type SetConfigurationError =
  SetConfigurationErrors[keyof SetConfigurationErrors];

export type SetConfigurationResponses = {
  /**
   * Successful Response
   */
  200: ConfigurationResponse;
};

export type SetConfigurationResponse =
  SetConfigurationResponses[keyof SetConfigurationResponses];

export type GetConfigurationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by configuration name
     * A set of configuration names to filter by.
     */
    name?: PublicConfigName[];
  };
  url: "/MAAS/a/v3/configurations";
};

export type GetConfigurationsErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetConfigurationsError =
  GetConfigurationsErrors[keyof GetConfigurationsErrors];

export type GetConfigurationsResponses = {
  /**
   * Successful Response
   */
  200: ConfigurationsListResponse;
};

export type GetConfigurationsResponse =
  GetConfigurationsResponses[keyof GetConfigurationsResponses];

export type ListEventsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
    /**
     * Filter by system id
     */
    system_id?: string[];
  };
  url: "/MAAS/a/v3/events";
};

export type ListEventsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListEventsError = ListEventsErrors[keyof ListEventsErrors];

export type ListEventsResponses = {
  /**
   * Successful Response
   */
  200: EventsListResponse;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type ClearAllDiscoveriesWithOptionalIpAndMacData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Ip
     * Delete discoveries with this IP.
     */
    ip?: string;
    /**
     * Mac
     * Delete discoveries with this MAC.
     */
    mac?: string;
  };
  url: "/MAAS/a/v3/discoveries";
};

export type ClearAllDiscoveriesWithOptionalIpAndMacErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ClearAllDiscoveriesWithOptionalIpAndMacError =
  ClearAllDiscoveriesWithOptionalIpAndMacErrors[keyof ClearAllDiscoveriesWithOptionalIpAndMacErrors];

export type ClearAllDiscoveriesWithOptionalIpAndMacResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type ClearAllDiscoveriesWithOptionalIpAndMacResponse =
  ClearAllDiscoveriesWithOptionalIpAndMacResponses[keyof ClearAllDiscoveriesWithOptionalIpAndMacResponses];

export type ListDiscoveriesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/discoveries";
};

export type ListDiscoveriesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListDiscoveriesError =
  ListDiscoveriesErrors[keyof ListDiscoveriesErrors];

export type ListDiscoveriesResponses = {
  /**
   * Successful Response
   */
  200: DiscoveriesListResponse;
};

export type ListDiscoveriesResponse =
  ListDiscoveriesResponses[keyof ListDiscoveriesResponses];

export type ClearNeighboursDiscoveriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/discoveries:clear_neighbours";
};

export type ClearNeighboursDiscoveriesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ClearNeighboursDiscoveriesError =
  ClearNeighboursDiscoveriesErrors[keyof ClearNeighboursDiscoveriesErrors];

export type ClearNeighboursDiscoveriesResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type ClearNeighboursDiscoveriesResponse =
  ClearNeighboursDiscoveriesResponses[keyof ClearNeighboursDiscoveriesResponses];

export type ClearRdnsAndMdnsDiscoveriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/discoveries:clear_dns";
};

export type ClearRdnsAndMdnsDiscoveriesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ClearRdnsAndMdnsDiscoveriesError =
  ClearRdnsAndMdnsDiscoveriesErrors[keyof ClearRdnsAndMdnsDiscoveriesErrors];

export type ClearRdnsAndMdnsDiscoveriesResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type ClearRdnsAndMdnsDiscoveriesResponse =
  ClearRdnsAndMdnsDiscoveriesResponses[keyof ClearRdnsAndMdnsDiscoveriesResponses];

export type GetDiscoveryData = {
  body?: never;
  path: {
    /**
     * Discovery Id
     */
    discovery_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/discoveries/{discovery_id}";
};

export type GetDiscoveryErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetDiscoveryError = GetDiscoveryErrors[keyof GetDiscoveryErrors];

export type GetDiscoveryResponses = {
  /**
   * Successful Response
   */
  200: DiscoveryResponse;
};

export type GetDiscoveryResponse =
  GetDiscoveryResponses[keyof GetDiscoveryResponses];

export type ListDomainsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/domains";
};

export type ListDomainsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListDomainsError = ListDomainsErrors[keyof ListDomainsErrors];

export type ListDomainsResponses = {
  /**
   * Successful Response
   */
  200: DomainsListResponse;
};

export type ListDomainsResponse =
  ListDomainsResponses[keyof ListDomainsResponses];

export type CreateDomainData = {
  body: DomainRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/domains";
};

export type CreateDomainErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateDomainError = CreateDomainErrors[keyof CreateDomainErrors];

export type CreateDomainResponses = {
  /**
   * Successful Response
   */
  201: DomainResponse;
};

export type CreateDomainResponse =
  CreateDomainResponses[keyof CreateDomainResponses];

export type GetDomainRrsetsData = {
  body?: never;
  path: {
    /**
     * Domain Id
     */
    domain_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/domains/{domain_id}/rrsets";
};

export type GetDomainRrsetsErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetDomainRrsetsError =
  GetDomainRrsetsErrors[keyof GetDomainRrsetsErrors];

export type GetDomainRrsetsResponses = {
  /**
   * Successful Response
   */
  200: DomainResourceRecordSetListResponse;
};

export type GetDomainRrsetsResponse =
  GetDomainRrsetsResponses[keyof GetDomainRrsetsResponses];

export type CreateDomainRrsetsData = {
  body: DnsResourceRecordSetRequest;
  path: {
    /**
     * Domain Id
     */
    domain_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/domains/{domain_id}/rrsets";
};

export type CreateDomainRrsetsErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateDomainRrsetsError =
  CreateDomainRrsetsErrors[keyof CreateDomainRrsetsErrors];

export type CreateDomainRrsetsResponses = {
  /**
   * Successful Response
   */
  200: DomainResourceRecordSetListResponse;
};

export type CreateDomainRrsetsResponse =
  CreateDomainRrsetsResponses[keyof CreateDomainRrsetsResponses];

export type DeleteDomainData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Domain Id
     */
    domain_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/domains/{domain_id}";
};

export type DeleteDomainErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteDomainError = DeleteDomainErrors[keyof DeleteDomainErrors];

export type DeleteDomainResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteDomainResponse =
  DeleteDomainResponses[keyof DeleteDomainResponses];

export type GetDomainData = {
  body?: never;
  path: {
    /**
     * Domain Id
     */
    domain_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/domains/{domain_id}";
};

export type GetDomainErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetDomainError = GetDomainErrors[keyof GetDomainErrors];

export type GetDomainResponses = {
  /**
   * Successful Response
   */
  200: DomainResponse;
};

export type GetDomainResponse = GetDomainResponses[keyof GetDomainResponses];

export type ListFabricsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics";
};

export type ListFabricsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricsError = ListFabricsErrors[keyof ListFabricsErrors];

export type ListFabricsResponses = {
  /**
   * Successful Response
   */
  200: FabricsListResponse;
};

export type ListFabricsResponse =
  ListFabricsResponses[keyof ListFabricsResponses];

export type CreateFabricData = {
  body: FabricRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/fabrics";
};

export type CreateFabricErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricError = CreateFabricErrors[keyof CreateFabricErrors];

export type CreateFabricResponses = {
  /**
   * Successful Response
   */
  201: FabricResponse;
};

export type CreateFabricResponse =
  CreateFabricResponses[keyof CreateFabricResponses];

export type DeleteFabricData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}";
};

export type DeleteFabricErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricError = DeleteFabricErrors[keyof DeleteFabricErrors];

export type DeleteFabricResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricResponse =
  DeleteFabricResponses[keyof DeleteFabricResponses];

export type GetFabricData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}";
};

export type GetFabricErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricError = GetFabricErrors[keyof GetFabricErrors];

export type GetFabricResponses = {
  /**
   * Successful Response
   */
  200: FabricResponse;
};

export type GetFabricResponse = GetFabricResponses[keyof GetFabricResponses];

export type UpdateFabricData = {
  body: FabricRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}";
};

export type UpdateFabricErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricError = UpdateFabricErrors[keyof UpdateFabricErrors];

export type UpdateFabricResponses = {
  /**
   * Successful Response
   */
  200: FabricResponse;
};

export type UpdateFabricResponse =
  UpdateFabricResponses[keyof UpdateFabricResponses];

export type ListInterfacesData = {
  body?: never;
  path: {
    /**
     * Node Id
     */
    node_id: number;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/machines/{node_id}/interfaces";
};

export type ListInterfacesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListInterfacesError =
  ListInterfacesErrors[keyof ListInterfacesErrors];

export type ListInterfacesResponses = {
  /**
   * Successful Response
   */
  200: InterfaceListResponse;
};

export type ListInterfacesResponse =
  ListInterfacesResponses[keyof ListInterfacesResponses];

export type ListFabricVlanSubnetIprangeData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges";
};

export type ListFabricVlanSubnetIprangeErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlanSubnetIprangeError =
  ListFabricVlanSubnetIprangeErrors[keyof ListFabricVlanSubnetIprangeErrors];

export type ListFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  200: IpRangeListResponse;
};

export type ListFabricVlanSubnetIprangeResponse =
  ListFabricVlanSubnetIprangeResponses[keyof ListFabricVlanSubnetIprangeResponses];

export type CreateFabricVlanSubnetIprangeData = {
  body: IpRangeCreateRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges";
};

export type CreateFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanSubnetIprangeError =
  CreateFabricVlanSubnetIprangeErrors[keyof CreateFabricVlanSubnetIprangeErrors];

export type CreateFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  201: IpRangeResponse;
};

export type CreateFabricVlanSubnetIprangeResponse =
  CreateFabricVlanSubnetIprangeResponses[keyof CreateFabricVlanSubnetIprangeResponses];

export type DeleteFabricVlanSubnetIprangeData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Iprange Id
     */
    iprange_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}";
};

export type DeleteFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanSubnetIprangeError =
  DeleteFabricVlanSubnetIprangeErrors[keyof DeleteFabricVlanSubnetIprangeErrors];

export type DeleteFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricVlanSubnetIprangeResponse =
  DeleteFabricVlanSubnetIprangeResponses[keyof DeleteFabricVlanSubnetIprangeResponses];

export type UpdateFabricVlanSubnetIprangeData = {
  body: IpRangeUpdateRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Iprange Id
     */
    iprange_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}";
};

export type UpdateFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanSubnetIprangeError =
  UpdateFabricVlanSubnetIprangeErrors[keyof UpdateFabricVlanSubnetIprangeErrors];

export type UpdateFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  200: IpRangeResponse;
};

export type UpdateFabricVlanSubnetIprangeResponse =
  UpdateFabricVlanSubnetIprangeResponses[keyof UpdateFabricVlanSubnetIprangeResponses];

export type GetFabricVlanSubnetIprangeData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{id}";
};

export type GetFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanSubnetIprangeError =
  GetFabricVlanSubnetIprangeErrors[keyof GetFabricVlanSubnetIprangeErrors];

export type GetFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  200: IpRangeResponse;
};

export type GetFabricVlanSubnetIprangeResponse =
  GetFabricVlanSubnetIprangeResponses[keyof GetFabricVlanSubnetIprangeResponses];

export type GetMachinePowerParametersData = {
  body?: never;
  path: {
    /**
     * System Id
     */
    system_id: string;
  };
  query?: never;
  url: "/MAAS/a/v3/machines/{system_id}/power_parameters";
};

export type GetMachinePowerParametersErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetMachinePowerParametersError =
  GetMachinePowerParametersErrors[keyof GetMachinePowerParametersErrors];

export type GetMachinePowerParametersResponses = {
  /**
   * Successful Response
   */
  200: PowerDriverResponse;
};

export type GetMachinePowerParametersResponse =
  GetMachinePowerParametersResponses[keyof GetMachinePowerParametersResponses];

export type ListMachinePciDevicesData = {
  body?: never;
  path: {
    /**
     * System Id
     */
    system_id: string;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/machines/{system_id}/pci_devices";
};

export type ListMachinePciDevicesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListMachinePciDevicesError =
  ListMachinePciDevicesErrors[keyof ListMachinePciDevicesErrors];

export type ListMachinePciDevicesResponses = {
  /**
   * Successful Response
   */
  200: PciDevicesListResponse;
};

export type ListMachinePciDevicesResponse =
  ListMachinePciDevicesResponses[keyof ListMachinePciDevicesResponses];

export type ListMachineUsbDevicesData = {
  body?: never;
  path: {
    /**
     * System Id
     */
    system_id: string;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/machines/{system_id}/usb_devices";
};

export type ListMachineUsbDevicesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListMachineUsbDevicesError =
  ListMachineUsbDevicesErrors[keyof ListMachineUsbDevicesErrors];

export type ListMachineUsbDevicesResponses = {
  /**
   * Successful Response
   */
  200: UsbDevicesListResponse;
};

export type ListMachineUsbDevicesResponse =
  ListMachineUsbDevicesResponses[keyof ListMachineUsbDevicesResponses];

export type ListMachinesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/machines";
};

export type ListMachinesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListMachinesError = ListMachinesErrors[keyof ListMachinesErrors];

export type ListMachinesResponses = {
  /**
   * Successful Response
   */
  200: MachinesListResponse;
};

export type ListMachinesResponse =
  ListMachinesResponses[keyof ListMachinesResponses];

export type ListNotificationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Only Active
     * Wheter to return only the non-dismissed notifications
     */
    only_active?: boolean;
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/notifications";
};

export type ListNotificationsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListNotificationsError =
  ListNotificationsErrors[keyof ListNotificationsErrors];

export type ListNotificationsResponses = {
  /**
   * Successful Response
   */
  200: NotificationsListResponse;
};

export type ListNotificationsResponse =
  ListNotificationsResponses[keyof ListNotificationsResponses];

export type CreateNotificationData = {
  body: NotificationRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/notifications";
};

export type CreateNotificationErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateNotificationError =
  CreateNotificationErrors[keyof CreateNotificationErrors];

export type CreateNotificationResponses = {
  /**
   * Successful Response
   */
  200: NotificationResponse;
};

export type CreateNotificationResponse =
  CreateNotificationResponses[keyof CreateNotificationResponses];

export type DeleteNotificationData = {
  body?: never;
  path: {
    /**
     * Notification Id
     */
    notification_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/notifications/{notification_id}";
};

export type DeleteNotificationErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteNotificationError =
  DeleteNotificationErrors[keyof DeleteNotificationErrors];

export type DeleteNotificationResponses = {
  /**
   * Successful Response
   */
  200: unknown;
  /**
   * No Content
   */
  204: void;
};

export type DeleteNotificationResponse =
  DeleteNotificationResponses[keyof DeleteNotificationResponses];

export type GetNotificationData = {
  body?: never;
  path: {
    /**
     * Notification Id
     */
    notification_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/notifications/{notification_id}";
};

export type GetNotificationErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetNotificationError =
  GetNotificationErrors[keyof GetNotificationErrors];

export type GetNotificationResponses = {
  /**
   * Successful Response
   */
  200: NotificationResponse;
};

export type GetNotificationResponse =
  GetNotificationResponses[keyof GetNotificationResponses];

export type UpdateNotificationData = {
  body: NotificationRequest;
  path: {
    /**
     * Notification Id
     */
    notification_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/notifications/{notification_id}";
};

export type UpdateNotificationErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateNotificationError =
  UpdateNotificationErrors[keyof UpdateNotificationErrors];

export type UpdateNotificationResponses = {
  /**
   * Successful Response
   */
  200: NotificationResponse;
};

export type UpdateNotificationResponse =
  UpdateNotificationResponses[keyof UpdateNotificationResponses];

export type DismissNotificationData = {
  body?: never;
  path: {
    /**
     * Notification Id
     */
    notification_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/notifications/{notification_id}:dismiss";
};

export type DismissNotificationErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DismissNotificationError =
  DismissNotificationErrors[keyof DismissNotificationErrors];

export type DismissNotificationResponses = {
  /**
   * Successful Response
   */
  200: unknown;
  /**
   * No Content
   */
  204: void;
};

export type DismissNotificationResponse =
  DismissNotificationResponses[keyof DismissNotificationResponses];

export type ListPackageRepositoriesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/package_repositories";
};

export type ListPackageRepositoriesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListPackageRepositoriesError =
  ListPackageRepositoriesErrors[keyof ListPackageRepositoriesErrors];

export type ListPackageRepositoriesResponses = {
  /**
   * Successful Response
   */
  200: PackageRepositoryListResponse;
};

export type ListPackageRepositoriesResponse =
  ListPackageRepositoriesResponses[keyof ListPackageRepositoriesResponses];

export type CreatePackageRepositoryData = {
  body: PackageRepositoryCreateRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/package_repositories";
};

export type CreatePackageRepositoryErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreatePackageRepositoryError =
  CreatePackageRepositoryErrors[keyof CreatePackageRepositoryErrors];

export type CreatePackageRepositoryResponses = {
  /**
   * Successful Response
   */
  201: PackageRepositoryResponse;
};

export type CreatePackageRepositoryResponse =
  CreatePackageRepositoryResponses[keyof CreatePackageRepositoryResponses];

export type DeletePackageRepositoryData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Package Repository Id
     */
    package_repository_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/package_repositories/{package_repository_id}";
};

export type DeletePackageRepositoryErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeletePackageRepositoryError =
  DeletePackageRepositoryErrors[keyof DeletePackageRepositoryErrors];

export type DeletePackageRepositoryResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeletePackageRepositoryResponse =
  DeletePackageRepositoryResponses[keyof DeletePackageRepositoryResponses];

export type GetPackageRepositoryData = {
  body?: never;
  path: {
    /**
     * Package Repository Id
     */
    package_repository_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/package_repositories/{package_repository_id}";
};

export type GetPackageRepositoryErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetPackageRepositoryError =
  GetPackageRepositoryErrors[keyof GetPackageRepositoryErrors];

export type GetPackageRepositoryResponses = {
  /**
   * Successful Response
   */
  200: PackageRepositoryResponse;
};

export type GetPackageRepositoryResponse =
  GetPackageRepositoryResponses[keyof GetPackageRepositoryResponses];

export type UpdatePackageRepositoryData = {
  body: PackageRepositoryUpdateRequest;
  path: {
    /**
     * Package Repository Id
     */
    package_repository_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/package_repositories/{package_repository_id}";
};

export type UpdatePackageRepositoryErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdatePackageRepositoryError =
  UpdatePackageRepositoryErrors[keyof UpdatePackageRepositoryErrors];

export type UpdatePackageRepositoryResponses = {
  /**
   * Successful Response
   */
  200: PackageRepositoryResponse;
};

export type UpdatePackageRepositoryResponse =
  UpdatePackageRepositoryResponses[keyof UpdatePackageRepositoryResponses];

export type ListFabricVlanSubnetReservedIpsData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips";
};

export type ListFabricVlanSubnetReservedIpsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlanSubnetReservedIpsError =
  ListFabricVlanSubnetReservedIpsErrors[keyof ListFabricVlanSubnetReservedIpsErrors];

export type ListFabricVlanSubnetReservedIpsResponses = {
  /**
   * Successful Response
   */
  200: ReservedIpsListResponse;
};

export type ListFabricVlanSubnetReservedIpsResponse =
  ListFabricVlanSubnetReservedIpsResponses[keyof ListFabricVlanSubnetReservedIpsResponses];

export type CreateFabricVlanSubnetReservedIpData = {
  body: ReservedIpCreateRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips";
};

export type CreateFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanSubnetReservedIpError =
  CreateFabricVlanSubnetReservedIpErrors[keyof CreateFabricVlanSubnetReservedIpErrors];

export type CreateFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  201: ReservedIpResponse;
};

export type CreateFabricVlanSubnetReservedIpResponse =
  CreateFabricVlanSubnetReservedIpResponses[keyof CreateFabricVlanSubnetReservedIpResponses];

export type DeleteFabricVlanSubnetReservedIpData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}";
};

export type DeleteFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanSubnetReservedIpError =
  DeleteFabricVlanSubnetReservedIpErrors[keyof DeleteFabricVlanSubnetReservedIpErrors];

export type DeleteFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  200: unknown;
  /**
   * No Content
   */
  204: void;
};

export type DeleteFabricVlanSubnetReservedIpResponse =
  DeleteFabricVlanSubnetReservedIpResponses[keyof DeleteFabricVlanSubnetReservedIpResponses];

export type UpdateFabricVlanSubnetReservedIpData = {
  body: ReservedIpUpdateRequest;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}";
};

export type UpdateFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanSubnetReservedIpError =
  UpdateFabricVlanSubnetReservedIpErrors[keyof UpdateFabricVlanSubnetReservedIpErrors];

export type UpdateFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  200: ReservedIpResponse;
};

export type UpdateFabricVlanSubnetReservedIpResponse =
  UpdateFabricVlanSubnetReservedIpResponses[keyof UpdateFabricVlanSubnetReservedIpResponses];

export type GetFabricVlanSubnetReservedIpData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Reservedip Id
     */
    reservedip_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{reservedip_id}";
};

export type GetFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanSubnetReservedIpError =
  GetFabricVlanSubnetReservedIpErrors[keyof GetFabricVlanSubnetReservedIpErrors];

export type GetFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  200: ReservedIpResponse;
};

export type GetFabricVlanSubnetReservedIpResponse =
  GetFabricVlanSubnetReservedIpResponses[keyof GetFabricVlanSubnetReservedIpResponses];

export type ListResourcePoolsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/resource_pools";
};

export type ListResourcePoolsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListResourcePoolsError =
  ListResourcePoolsErrors[keyof ListResourcePoolsErrors];

export type ListResourcePoolsResponses = {
  /**
   * Successful Response
   */
  200: ResourcePoolsListResponse;
};

export type ListResourcePoolsResponse =
  ListResourcePoolsResponses[keyof ListResourcePoolsResponses];

export type CreateResourcePoolData = {
  body: ResourcePoolRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/resource_pools";
};

export type CreateResourcePoolErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateResourcePoolError =
  CreateResourcePoolErrors[keyof CreateResourcePoolErrors];

export type CreateResourcePoolResponses = {
  /**
   * Successful Response
   */
  201: ResourcePoolResponse;
};

export type CreateResourcePoolResponse =
  CreateResourcePoolResponses[keyof CreateResourcePoolResponses];

export type DeleteResourcePoolData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Resource Pool Id
     */
    resource_pool_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/resource_pools/{resource_pool_id}";
};

export type DeleteResourcePoolErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteResourcePoolError =
  DeleteResourcePoolErrors[keyof DeleteResourcePoolErrors];

export type DeleteResourcePoolResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteResourcePoolResponse =
  DeleteResourcePoolResponses[keyof DeleteResourcePoolResponses];

export type GetResourcePoolData = {
  body?: never;
  path: {
    /**
     * Resource Pool Id
     */
    resource_pool_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/resource_pools/{resource_pool_id}";
};

export type GetResourcePoolErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetResourcePoolError =
  GetResourcePoolErrors[keyof GetResourcePoolErrors];

export type GetResourcePoolResponses = {
  /**
   * Successful Response
   */
  200: ResourcePoolResponse;
};

export type GetResourcePoolResponse =
  GetResourcePoolResponses[keyof GetResourcePoolResponses];

export type UpdateResourcePoolData = {
  body: ResourcePoolRequest;
  path: {
    /**
     * Resource Pool Id
     */
    resource_pool_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/resource_pools/{resource_pool_id}";
};

export type UpdateResourcePoolErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateResourcePoolError =
  UpdateResourcePoolErrors[keyof UpdateResourcePoolErrors];

export type UpdateResourcePoolResponses = {
  /**
   * Successful Response
   */
  200: ResourcePoolResponse;
};

export type UpdateResourcePoolResponse =
  UpdateResourcePoolResponses[keyof UpdateResourcePoolResponses];

export type ListResourcePoolsWithSummaryData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/resource_pools_with_summary";
};

export type ListResourcePoolsWithSummaryErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListResourcePoolsWithSummaryError =
  ListResourcePoolsWithSummaryErrors[keyof ListResourcePoolsWithSummaryErrors];

export type ListResourcePoolsWithSummaryResponses = {
  /**
   * Successful Response
   */
  200: ResourcePoolsWithSummaryListResponse;
};

export type ListResourcePoolsWithSummaryResponse =
  ListResourcePoolsWithSummaryResponses[keyof ListResourcePoolsWithSummaryResponses];

export type ListFabricVlanSubnetStaticroutesData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes";
};

export type ListFabricVlanSubnetStaticroutesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlanSubnetStaticroutesError =
  ListFabricVlanSubnetStaticroutesErrors[keyof ListFabricVlanSubnetStaticroutesErrors];

export type ListFabricVlanSubnetStaticroutesResponses = {
  /**
   * Successful Response
   */
  200: StaticRoutesListResponse;
};

export type ListFabricVlanSubnetStaticroutesResponse =
  ListFabricVlanSubnetStaticroutesResponses[keyof ListFabricVlanSubnetStaticroutesResponses];

export type CreateFabricVlanSubnetStaticrouteData = {
  body: StaticRouteRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes";
};

export type CreateFabricVlanSubnetStaticrouteErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanSubnetStaticrouteError =
  CreateFabricVlanSubnetStaticrouteErrors[keyof CreateFabricVlanSubnetStaticrouteErrors];

export type CreateFabricVlanSubnetStaticrouteResponses = {
  /**
   * Successful Response
   */
  201: StaticRouteResponse;
};

export type CreateFabricVlanSubnetStaticrouteResponse =
  CreateFabricVlanSubnetStaticrouteResponses[keyof CreateFabricVlanSubnetStaticrouteResponses];

export type DeleteFabricVlanSubnetStaticrouteData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes/{id}";
};

export type DeleteFabricVlanSubnetStaticrouteErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanSubnetStaticrouteError =
  DeleteFabricVlanSubnetStaticrouteErrors[keyof DeleteFabricVlanSubnetStaticrouteErrors];

export type DeleteFabricVlanSubnetStaticrouteResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricVlanSubnetStaticrouteResponse =
  DeleteFabricVlanSubnetStaticrouteResponses[keyof DeleteFabricVlanSubnetStaticrouteResponses];

export type GetFabricVlanSubnetStaticrouteData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes/{id}";
};

export type GetFabricVlanSubnetStaticrouteErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanSubnetStaticrouteError =
  GetFabricVlanSubnetStaticrouteErrors[keyof GetFabricVlanSubnetStaticrouteErrors];

export type GetFabricVlanSubnetStaticrouteResponses = {
  /**
   * Successful Response
   */
  200: StaticRouteResponse;
};

export type GetFabricVlanSubnetStaticrouteResponse =
  GetFabricVlanSubnetStaticrouteResponses[keyof GetFabricVlanSubnetStaticrouteResponses];

export type UpdateFabricVlanSubnetStaticrouteData = {
  body: StaticRouteRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/staticroutes/{id}";
};

export type UpdateFabricVlanSubnetStaticrouteErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanSubnetStaticrouteError =
  UpdateFabricVlanSubnetStaticrouteErrors[keyof UpdateFabricVlanSubnetStaticrouteErrors];

export type UpdateFabricVlanSubnetStaticrouteResponses = {
  /**
   * Successful Response
   */
  200: StaticRouteResponse;
};

export type UpdateFabricVlanSubnetStaticrouteResponse =
  UpdateFabricVlanSubnetStaticrouteResponses[keyof UpdateFabricVlanSubnetStaticrouteResponses];

export type ListSpacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/spaces";
};

export type ListSpacesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListSpacesError = ListSpacesErrors[keyof ListSpacesErrors];

export type ListSpacesResponses = {
  /**
   * Successful Response
   */
  200: SpacesListResponse;
};

export type ListSpacesResponse = ListSpacesResponses[keyof ListSpacesResponses];

export type CreateSpaceData = {
  body: SpaceRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/spaces";
};

export type CreateSpaceErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateSpaceError = CreateSpaceErrors[keyof CreateSpaceErrors];

export type CreateSpaceResponses = {
  /**
   * Successful Response
   */
  201: SpaceResponse;
};

export type CreateSpaceResponse =
  CreateSpaceResponses[keyof CreateSpaceResponses];

export type DeleteSpaceData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Space Id
     */
    space_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/spaces/{space_id}";
};

export type DeleteSpaceErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteSpaceError = DeleteSpaceErrors[keyof DeleteSpaceErrors];

export type DeleteSpaceResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteSpaceResponse =
  DeleteSpaceResponses[keyof DeleteSpaceResponses];

export type GetSpaceData = {
  body?: never;
  path: {
    /**
     * Space Id
     */
    space_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/spaces/{space_id}";
};

export type GetSpaceErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetSpaceError = GetSpaceErrors[keyof GetSpaceErrors];

export type GetSpaceResponses = {
  /**
   * Successful Response
   */
  200: SpaceResponse;
};

export type GetSpaceResponse = GetSpaceResponses[keyof GetSpaceResponses];

export type UpdateSpaceData = {
  body: SpaceRequest;
  path: {
    /**
     * Space Id
     */
    space_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/spaces/{space_id}";
};

export type UpdateSpaceErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateSpaceError = UpdateSpaceErrors[keyof UpdateSpaceErrors];

export type UpdateSpaceResponses = {
  /**
   * Successful Response
   */
  200: SpaceResponse;
};

export type UpdateSpaceResponse =
  UpdateSpaceResponses[keyof UpdateSpaceResponses];

export type ListUserSshkeysData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/users/me/sshkeys";
};

export type ListUserSshkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListUserSshkeysError =
  ListUserSshkeysErrors[keyof ListUserSshkeysErrors];

export type ListUserSshkeysResponses = {
  /**
   * Successful Response
   */
  200: SshKeysListResponse;
};

export type ListUserSshkeysResponse =
  ListUserSshkeysResponses[keyof ListUserSshkeysResponses];

export type CreateUserSshkeysData = {
  body: SshKeyManualUploadRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys";
};

export type CreateUserSshkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateUserSshkeysError =
  CreateUserSshkeysErrors[keyof CreateUserSshkeysErrors];

export type CreateUserSshkeysResponses = {
  /**
   * Successful Response
   */
  201: SshKeyResponse;
};

export type CreateUserSshkeysResponse =
  CreateUserSshkeysResponses[keyof CreateUserSshkeysResponses];

export type DeleteUserSshkeyData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys/{id}";
};

export type DeleteUserSshkeyErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Precondition Failed
   */
  412: PreconditionFailedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteUserSshkeyError =
  DeleteUserSshkeyErrors[keyof DeleteUserSshkeyErrors];

export type DeleteUserSshkeyResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteUserSshkeyResponse =
  DeleteUserSshkeyResponses[keyof DeleteUserSshkeyResponses];

export type GetUserSshkeyData = {
  body?: never;
  path: {
    /**
     * Sshkey Id
     */
    sshkey_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys/{sshkey_id}";
};

export type GetUserSshkeyErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserSshkeyError = GetUserSshkeyErrors[keyof GetUserSshkeyErrors];

export type GetUserSshkeyResponses = {
  /**
   * Successful Response
   */
  200: SshKeyResponse;
};

export type GetUserSshkeyResponse =
  GetUserSshkeyResponses[keyof GetUserSshkeyResponses];

export type ImportUserSshkeysData = {
  body: SshKeyImportFromSourceRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys:import";
};

export type ImportUserSshkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ImportUserSshkeysError =
  ImportUserSshkeysErrors[keyof ImportUserSshkeysErrors];

export type ImportUserSshkeysResponses = {
  /**
   * Successful Response
   */
  201: SshKeysListResponse;
};

export type ImportUserSshkeysResponse =
  ImportUserSshkeysResponses[keyof ImportUserSshkeysResponses];

export type GetUserSslkeysData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/users/me/sslkeys";
};

export type GetUserSslkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserSslkeysError =
  GetUserSslkeysErrors[keyof GetUserSslkeysErrors];

export type GetUserSslkeysResponses = {
  /**
   * Successful Response
   */
  200: SslKeyListResponse;
};

export type GetUserSslkeysResponse =
  GetUserSslkeysResponses[keyof GetUserSslkeysResponses];

export type CreateUserSslkeyData = {
  body: SslKeyRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me/sslkeys";
};

export type CreateUserSslkeyErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateUserSslkeyError =
  CreateUserSslkeyErrors[keyof CreateUserSslkeyErrors];

export type CreateUserSslkeyResponses = {
  /**
   * Successful Response
   */
  201: SslKeyResponse;
};

export type CreateUserSslkeyResponse =
  CreateUserSslkeyResponses[keyof CreateUserSslkeyResponses];

export type DeleteUserSslkeyData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Sslkey Id
     */
    sslkey_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}";
};

export type DeleteUserSslkeyErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteUserSslkeyError =
  DeleteUserSslkeyErrors[keyof DeleteUserSslkeyErrors];

export type DeleteUserSslkeyResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteUserSslkeyResponse =
  DeleteUserSslkeyResponses[keyof DeleteUserSslkeyResponses];

export type GetUserSslkeyData = {
  body?: never;
  path: {
    /**
     * Sslkey Id
     */
    sslkey_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}";
};

export type GetUserSslkeyErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserSslkeyError = GetUserSslkeyErrors[keyof GetUserSslkeyErrors];

export type GetUserSslkeyResponses = {
  /**
   * Successful Response
   */
  200: SslKeyResponse;
};

export type GetUserSslkeyResponse =
  GetUserSslkeyResponses[keyof GetUserSslkeyResponses];

export type GetUserSslkeysWithSummaryData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/users/me/sslkeys_with_summary";
};

export type GetUserSslkeysWithSummaryErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserSslkeysWithSummaryError =
  GetUserSslkeysWithSummaryErrors[keyof GetUserSslkeysWithSummaryErrors];

export type GetUserSslkeysWithSummaryResponses = {
  /**
   * Successful Response
   */
  200: SslKeysWithSummaryListResponse;
};

export type GetUserSslkeysWithSummaryResponse =
  GetUserSslkeysWithSummaryResponses[keyof GetUserSslkeysWithSummaryResponses];

export type ListFabricVlanSubnetsData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets";
};

export type ListFabricVlanSubnetsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlanSubnetsError =
  ListFabricVlanSubnetsErrors[keyof ListFabricVlanSubnetsErrors];

export type ListFabricVlanSubnetsResponses = {
  /**
   * Successful Response
   */
  200: SubnetsListResponse;
};

export type ListFabricVlanSubnetsResponse =
  ListFabricVlanSubnetsResponses[keyof ListFabricVlanSubnetsResponses];

export type CreateFabricVlanSubnetData = {
  body: SubnetRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets";
};

export type CreateFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanSubnetError =
  CreateFabricVlanSubnetErrors[keyof CreateFabricVlanSubnetErrors];

export type CreateFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  201: SubnetResponse;
};

export type CreateFabricVlanSubnetResponse =
  CreateFabricVlanSubnetResponses[keyof CreateFabricVlanSubnetResponses];

export type DeleteFabricVlanSubnetData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}";
};

export type DeleteFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanSubnetError =
  DeleteFabricVlanSubnetErrors[keyof DeleteFabricVlanSubnetErrors];

export type DeleteFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricVlanSubnetResponse =
  DeleteFabricVlanSubnetResponses[keyof DeleteFabricVlanSubnetResponses];

export type UpdateFabricVlanSubnetData = {
  body: SubnetRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Id
     */
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}";
};

export type UpdateFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanSubnetError =
  UpdateFabricVlanSubnetErrors[keyof UpdateFabricVlanSubnetErrors];

export type UpdateFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  200: SubnetResponse;
};

export type UpdateFabricVlanSubnetResponse =
  UpdateFabricVlanSubnetResponses[keyof UpdateFabricVlanSubnetResponses];

export type GetFabricVlanSubnetData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
    /**
     * Subnet Id
     */
    subnet_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}";
};

export type GetFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanSubnetError =
  GetFabricVlanSubnetErrors[keyof GetFabricVlanSubnetErrors];

export type GetFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  200: SubnetResponse;
};

export type GetFabricVlanSubnetResponse =
  GetFabricVlanSubnetResponses[keyof GetFabricVlanSubnetResponses];

export type ListTagsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/tags";
};

export type ListTagsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListTagsError = ListTagsErrors[keyof ListTagsErrors];

export type ListTagsResponses = {
  /**
   * Successful Response
   */
  200: TagsListResponse;
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
  body: TagRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/tags";
};

export type CreateTagErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateTagError = CreateTagErrors[keyof CreateTagErrors];

export type CreateTagResponses = {
  /**
   * Successful Response
   */
  201: TagResponse;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type DeleteTagData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Tag Id
     */
    tag_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/tags/{tag_id}";
};

export type DeleteTagErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteTagError = DeleteTagErrors[keyof DeleteTagErrors];

export type DeleteTagResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagData = {
  body?: never;
  path: {
    /**
     * Tag Id
     */
    tag_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/tags/{tag_id}";
};

export type GetTagErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetTagError = GetTagErrors[keyof GetTagErrors];

export type GetTagResponses = {
  /**
   * Successful Response
   */
  200: TagResponse;
};

export type GetTagResponse = GetTagResponses[keyof GetTagResponses];

export type UpdateTagData = {
  body: TagRequest;
  path: {
    /**
     * Tag Id
     */
    tag_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/tags/{tag_id}";
};

export type UpdateTagErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateTagError = UpdateTagErrors[keyof UpdateTagErrors];

export type UpdateTagResponses = {
  /**
   * Successful Response
   */
  200: TagResponse;
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type GetMeWithSummaryData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me_with_summary";
};

export type GetMeWithSummaryErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetMeWithSummaryError =
  GetMeWithSummaryErrors[keyof GetMeWithSummaryErrors];

export type GetMeWithSummaryResponses = {
  /**
   * Successful Response
   */
  200: UserWithSummaryResponse;
};

export type GetMeWithSummaryResponse =
  GetMeWithSummaryResponses[keyof GetMeWithSummaryResponses];

export type GetUserInfoData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me";
};

export type GetUserInfoErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserInfoError = GetUserInfoErrors[keyof GetUserInfoErrors];

export type GetUserInfoResponses = {
  /**
   * Successful Response
   */
  200: UserInfoResponse;
};

export type GetUserInfoResponse =
  GetUserInfoResponses[keyof GetUserInfoResponses];

export type CompleteIntroData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me:complete_intro";
};

export type CompleteIntroErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CompleteIntroError = CompleteIntroErrors[keyof CompleteIntroErrors];

export type CompleteIntroResponses = {
  /**
   * Successful Response
   */
  200: unknown;
  /**
   * No Content
   */
  204: void;
};

export type CompleteIntroResponse =
  CompleteIntroResponses[keyof CompleteIntroResponses];

export type ChangePasswordUserData = {
  body: UserChangePasswordRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me:change_password";
};

export type ChangePasswordUserErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ChangePasswordUserError =
  ChangePasswordUserErrors[keyof ChangePasswordUserErrors];

export type ChangePasswordUserResponses = {
  /**
   * Successful Response
   */
  200: unknown;
  /**
   * No Content
   */
  204: void;
};

export type ChangePasswordUserResponse =
  ChangePasswordUserResponses[keyof ChangePasswordUserResponses];

export type ListUsersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/users";
};

export type ListUsersErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersListResponse;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
  body: UserCreateRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users";
};

export type CreateUserErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
  /**
   * Successful Response
   */
  201: UserResponse;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: {
    /**
     * Transfer Resources To
     * The id of the user to transfer the resources to.
     */
    transfer_resources_to?: number;
  };
  url: "/MAAS/a/v3/users/{user_id}";
};

export type DeleteUserErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Precondition Failed
   */
  412: PreconditionFailedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
  body?: never;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/{user_id}";
};

export type GetUserErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
  body: UserUpdateRequest;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/{user_id}";
};

export type UpdateUserErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type ChangePasswordAdminData = {
  body: UserChangePasswordRequest;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/{user_id}:change_password";
};

export type ChangePasswordAdminErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ChangePasswordAdminError =
  ChangePasswordAdminErrors[keyof ChangePasswordAdminErrors];

export type ChangePasswordAdminResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type ChangePasswordAdminResponse =
  ChangePasswordAdminResponses[keyof ChangePasswordAdminResponses];

export type ListUsersWithSummaryData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
    /**
     * Filter by username or email
     */
    username_or_email?: string;
  };
  url: "/MAAS/a/v3/users_with_summary";
};

export type ListUsersWithSummaryErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListUsersWithSummaryError =
  ListUsersWithSummaryErrors[keyof ListUsersWithSummaryErrors];

export type ListUsersWithSummaryResponses = {
  /**
   * Successful Response
   */
  200: UsersWithSummaryListResponse;
};

export type ListUsersWithSummaryResponse =
  ListUsersWithSummaryResponses[keyof ListUsersWithSummaryResponses];

export type ListFabricVlansData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
  };
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans";
};

export type ListFabricVlansErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlansError =
  ListFabricVlansErrors[keyof ListFabricVlansErrors];

export type ListFabricVlansResponses = {
  /**
   * Successful Response
   */
  200: VlansListResponse;
};

export type ListFabricVlansResponse =
  ListFabricVlansResponses[keyof ListFabricVlansResponses];

export type CreateFabricVlanData = {
  body: VlanCreateRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans";
};

export type CreateFabricVlanErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanError =
  CreateFabricVlanErrors[keyof CreateFabricVlanErrors];

export type CreateFabricVlanResponses = {
  /**
   * OK
   */
  200: VlanResponse;
  /**
   * Successful Response
   */
  201: VlanResponse;
};

export type CreateFabricVlanResponse =
  CreateFabricVlanResponses[keyof CreateFabricVlanResponses];

export type DeleteFabricVlanData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}";
};

export type DeleteFabricVlanErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanError =
  DeleteFabricVlanErrors[keyof DeleteFabricVlanErrors];

export type DeleteFabricVlanResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricVlanResponse =
  DeleteFabricVlanResponses[keyof DeleteFabricVlanResponses];

export type GetFabricVlanData = {
  body?: never;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}";
};

export type GetFabricVlanErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanError = GetFabricVlanErrors[keyof GetFabricVlanErrors];

export type GetFabricVlanResponses = {
  /**
   * Successful Response
   */
  200: VlanResponse;
};

export type GetFabricVlanResponse =
  GetFabricVlanResponses[keyof GetFabricVlanResponses];

export type UpdateFabricVlanData = {
  body: VlanUpdateRequest;
  path: {
    /**
     * Fabric Id
     */
    fabric_id: number;
    /**
     * Vlan Id
     */
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}";
};

export type UpdateFabricVlanErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanError =
  UpdateFabricVlanErrors[keyof UpdateFabricVlanErrors];

export type UpdateFabricVlanResponses = {
  /**
   * Successful Response
   */
  200: VlanResponse;
};

export type UpdateFabricVlanResponse =
  UpdateFabricVlanResponses[keyof UpdateFabricVlanResponses];

export type ListZonesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
    /**
     * Filter by zone id
     */
    id?: number[];
  };
  url: "/MAAS/a/v3/zones";
};

export type ListZonesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListZonesError = ListZonesErrors[keyof ListZonesErrors];

export type ListZonesResponses = {
  /**
   * Successful Response
   */
  200: ZonesListResponse;
};

export type ListZonesResponse = ListZonesResponses[keyof ListZonesResponses];

export type CreateZoneData = {
  body: ZoneRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/zones";
};

export type CreateZoneErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateZoneError = CreateZoneErrors[keyof CreateZoneErrors];

export type CreateZoneResponses = {
  /**
   * Successful Response
   */
  201: ZoneResponse;
};

export type CreateZoneResponse = CreateZoneResponses[keyof CreateZoneResponses];

export type DeleteZoneData = {
  body?: never;
  headers?: {
    /**
     * If-Match
     */
    "if-match"?: string;
  };
  path: {
    /**
     * Zone Id
     */
    zone_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/zones/{zone_id}";
};

export type DeleteZoneErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteZoneError = DeleteZoneErrors[keyof DeleteZoneErrors];

export type DeleteZoneResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteZoneResponse = DeleteZoneResponses[keyof DeleteZoneResponses];

export type GetZoneData = {
  body?: never;
  path: {
    /**
     * Zone Id
     */
    zone_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/zones/{zone_id}";
};

export type GetZoneErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetZoneError = GetZoneErrors[keyof GetZoneErrors];

export type GetZoneResponses = {
  /**
   * Successful Response
   */
  200: ZoneResponse;
};

export type GetZoneResponse = GetZoneResponses[keyof GetZoneResponses];

export type UpdateZoneData = {
  body: ZoneRequest;
  path: {
    /**
     * Zone Id
     */
    zone_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/zones/{zone_id}";
};

export type UpdateZoneErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateZoneError = UpdateZoneErrors[keyof UpdateZoneErrors];

export type UpdateZoneResponses = {
  /**
   * Successful Response
   */
  200: ZoneResponse;
};

export type UpdateZoneResponse = UpdateZoneResponses[keyof UpdateZoneResponses];

export type ListZonesWithSummaryData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page
     */
    page?: number;
    /**
     * Size
     */
    size?: number;
  };
  url: "/MAAS/a/v3/zones_with_summary";
};

export type ListZonesWithSummaryErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListZonesWithSummaryError =
  ListZonesWithSummaryErrors[keyof ListZonesWithSummaryErrors];

export type ListZonesWithSummaryResponses = {
  /**
   * Successful Response
   */
  200: ZonesWithSummaryListResponse;
};

export type ListZonesWithSummaryResponse =
  ListZonesWithSummaryResponses[keyof ListZonesWithSummaryResponses];

export type ClientOptions = {
  baseUrl: "http://maas-ui-demo.internal:5240" | (string & {});
};
