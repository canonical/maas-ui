// This file is auto-generated by @hey-api/openapi-ts

/**
 * Content for a response returning a JWT.
 */
export type AccessTokenResponse = {
  token_type: string;
  access_token: string;
  kind?: string;
};

export type BadRequestBodyResponse = {
  code?: number;
  message?: string;
  details?: Array<BaseExceptionDetail>;
  kind?: string;
};

export type BaseExceptionDetail = {
  type: string;
  message: string;
  field?: string;
  location?: string;
};

export type BaseHal = {
  self: BaseHref;
};

export type BaseHref = {
  href: string;
};

export type BodyLogin = {
  grant_type?: string;
  username: string;
  password: string;
  scope?: string;
  client_id?: string;
  client_secret?: string;
};

export type ConflictBodyResponse = {
  code?: number;
  message?: string;
  details?: Array<BaseExceptionDetail>;
  kind?: string;
};

export type DomainRequest = {
  /**
   * Name of the domain.
   */
  name: string;
  /**
   * Class type of the domain
   */
  authoritative?: boolean;
  /**
   * TTL for the domain.
   */
  ttl?: number;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type DomainResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  authoritative: boolean;
  ttl?: number;
  id: number;
  name: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type DomainsListResponse = {
  items: Array<DomainResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type EventResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  created: string;
  updated: string;
  type: EventTypeResponse;
  node_system_id?: string;
  node_hostname: string;
  user_id?: number;
  owner: string;
  ip_address?: string;
  user_agent: string;
  description: string;
  action: string;
  kind?: string;
};

/**
 * An enumeration.
 */
export type EventTypeLevelEnum =
  | "AUDIT"
  | "DEBUG"
  | "INFO"
  | "WARNING"
  | "ERROR"
  | "CRITICAL";

export type EventTypeResponse = {
  name: string;
  description: string;
  level: EventTypeLevelEnum;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type EventsListResponse = {
  items: Array<EventResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type FabricRequest = {
  /**
   * The unique name of the entity.
   */
  name: string;
  /**
   * The description of the fabric.
   */
  description?: string;
  class_type?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type FabricResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  name?: string;
  description?: string;
  class_type?: string;
  vlans: BaseHref;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type FabricsListResponse = {
  items: Array<FabricResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * An enumeration.
 */
export type HardwareDeviceTypeEnum = 0 | 1 | 2 | 3 | 4 | 5;

export type IpRangeCreateRequest = {
  /**
   * Type of this range.
   */
  type: IpRangeType;
  /**
   * Start IP address of this range (inclusive).
   */
  start_ip: string;
  /**
   * Last IP address of this range (inclusive).
   */
  end_ip: string;
  /**
   * A description of this range.
   */
  comment?: string;
  /**
   * The owner of this range.
   */
  owner_id?: number;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type IpRangeListResponse = {
  items: Array<IpRangeResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type IpRangeResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  type: IpRangeType;
  start_ip: string;
  end_ip: string;
  comment?: string;
  owner_id: number;
  kind?: string;
};

/**
 * The vocabulary of possible types of `IPRange` objects.
 */
export type IpRangeType = "dynamic" | "reserved";

export type IpRangeUpdateRequest = {
  /**
   * Type of this range.
   */
  type: IpRangeType;
  /**
   * Start IP address of this range (inclusive).
   */
  start_ip: string;
  /**
   * Last IP address of this range (inclusive).
   */
  end_ip: string;
  /**
   * A description of this range.
   */
  comment?: string;
  /**
   * The owner of this range.
   */
  owner_id: number;
};

/**
 * The vocabulary of possible types to link a `Subnet` to a `Interface`.
 */
export type InterfaceLinkType = "auto" | "dhcp" | "static" | "link_up";

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type InterfaceListResponse = {
  items: Array<InterfaceResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type InterfaceResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  name: string;
  type: InterfaceType;
  mac_address?: string;
  link_connected?: boolean;
  interface_speed?: number;
  enabled?: boolean;
  link_speed?: number;
  sriov_max_vf?: number;
  links?: Array<LinkResponse>;
  kind?: string;
};

/**
 * The vocabulary of possible types for `Interface`.
 */
export type InterfaceType =
  | "physical"
  | "bond"
  | "bridge"
  | "vlan"
  | "alias"
  | "unknown";

export type LinkResponse = {
  id: number;
  mode: InterfaceLinkType;
  ip_address?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type MachineResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  system_id: string;
  description: string;
  owner?: string;
  cpu_speed_MHz: number;
  memory_MiB: number;
  osystem: string;
  architecture?: string;
  distro_series: string;
  hwe_kernel?: string;
  locked: boolean;
  cpu_count: number;
  status: NodeStatus;
  power_type?: PowerTypeEnum;
  fqdn: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type MachinesListResponse = {
  items: Array<MachineResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * The vocabulary of a `Node`'s possible statuses.
 */
export type NodeStatus =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22;

export type NotFoundBodyResponse = {
  code?: number;
  message?: string;
  details?: Array<BaseExceptionDetail>;
  kind?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type PciDeviceResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  type: HardwareDeviceTypeEnum;
  vendor_id: string;
  product_id: string;
  vendor_name: string;
  product_name: string;
  commissioning_driver: string;
  bus_number: number;
  device_number: number;
  pci_address: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type PciDevicesListResponse = {
  items: Array<PciDeviceResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type PowerDriverResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  power_type: PowerTypeEnum;
  power_parameters: {
    [key: string]: unknown;
  };
  kind?: string;
};

/**
 * An enumeration.
 */
export type PowerTypeEnum =
  | "amt"
  | "apc"
  | "dli"
  | "eaton"
  | "hmc"
  | "hmcz"
  | "ipmi"
  | "lxd"
  | "manual"
  | "moonshot"
  | "mscm"
  | "msftocs"
  | "nova"
  | "openbmc"
  | "proxmox"
  | "raritan"
  | "recs_box"
  | "redfish"
  | "sm15k"
  | "ucsm"
  | "virsh"
  | "vmware"
  | "webhook"
  | "wedge";

export type PreconditionFailedBodyResponse = {
  code?: number;
  message?: string;
  details?: Array<BaseExceptionDetail>;
  kind?: string;
};

/**
 * The vocabulary of a `Subnet`'s possible reverse DNS modes.
 */
export type RdnsMode = 2 | 0 | 1;

export type ReservedIpCreateRequest = {
  /**
   * The IP to be reserved.
   */
  ip: string;
  /**
   * The MAC address that should be linked to the reserved IP.
   */
  mac_address: string;
  /**
   * A description of this reserved IP.
   */
  comment?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ReservedIpResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  ip: string;
  mac_address: string;
  comment?: string;
  kind?: string;
};

export type ReservedIpUpdateRequest = {
  /**
   * The IP to be reserved.
   */
  ip: string;
  /**
   * The MAC address that should be linked to the reserved IP.
   */
  mac_address: string;
  /**
   * A description of this reserved IP.
   */
  comment?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ReservedIpsListResponse = {
  items: Array<ReservedIpResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type ResourcePoolRequest = {
  /**
   * The unique name of the entity.
   */
  name: string;
  description?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ResourcePoolResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  name: string;
  description: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ResourcePoolsListResponse = {
  items: Array<ResourcePoolResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SslKeyListResponse = {
  items: Array<SslKeyResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type SslKeyRequest = {
  /**
   * A valid SSL key.
   */
  key: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SslKeyResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  key: string;
  kind?: string;
};

export type SpaceRequest = {
  /**
   * The unique name of the entity.
   */
  name: string;
  /**
   * The description of the zone.
   */
  description?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SpaceResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  name?: string;
  description?: string;
  vlans: BaseHref;
  subnets: BaseHref;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SpacesListResponse = {
  items: Array<SpaceResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type SshKeyImportFromSourceRequest = {
  /**
   * The source from where to fetch the key.
   */
  protocol: SshKeysProtocolType;
  /**
   * The username related to the source.
   */
  auth_id: string;
};

export type SshKeyManualUploadRequest = {
  /**
   * The SSH public key to be added.
   */
  key: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SshKeyResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  key: string;
  protocol?: SshKeysProtocolType;
  auth_id?: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SshKeysListResponse = {
  items: Array<SshKeyResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * An enumeration.
 */
export type SshKeysProtocolType = "lp" | "gh";

export type SubnetRequest = {
  /**
   * The unique name of the entity.
   */
  name?: string;
  /**
   * The description of the subnet.
   */
  description?: string;
  /**
   * The network CIDR for this subnet.
   */
  cidr: string;
  /**
   * How reverse DNS is handled for this subnet. One of:- ``0`` Disabled: No reverse zone is created.- ``1`` Enabled: Generate reverse zone.- ``2`` RFC2317: Extends '1' to create the necessary parent zone with the appropriate CNAME resource records for the network, if the network is small enough to require the support described in RFC2317.
   */
  rdns_mode?: RdnsMode;
  /**
   * The gateway IP for this subnet.
   */
  gateway_ip?: string;
  /**
   * List of DNS servers for the subnet.
   */
  dns_servers?: Array<string>;
  /**
   * Configure MAAS DNS to allow DNS resolution in this subnet.
   */
  allow_dns?: boolean;
  /**
   * Configure maas-proxy to allow requests from this subnet.
   */
  allow_proxy?: boolean;
  /**
   * Whether to allow active discovery in the subnet.
   */
  active_discovery?: boolean;
  /**
   * Whether this subnet is managed by MAAS or not.
   */
  managed?: boolean;
  /**
   * List of disabled boot architectures for this subnet.
   */
  disabled_boot_architectures?: Array<string>;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type SubnetResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  name?: string;
  description?: string;
  cidr: string;
  rdns_mode: RdnsMode;
  gateway_ip?: string;
  dns_servers?: Array<string>;
  allow_dns: boolean;
  allow_proxy: boolean;
  active_discovery: boolean;
  managed: boolean;
  disabled_boot_architectures: Array<string>;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type SubnetsListResponse = {
  items: Array<SubnetResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type UnauthorizedBodyResponse = {
  code?: number;
  message?: string;
  details?: Array<BaseExceptionDetail>;
  kind?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type UsbDeviceResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  type: HardwareDeviceTypeEnum;
  vendor_id: string;
  product_id: string;
  vendor_name: string;
  product_name: string;
  commissioning_driver: string;
  bus_number: number;
  device_number: number;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type UsbDevicesListResponse = {
  items: Array<UsbDeviceResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type UserInfoResponse = {
  id: number;
  username: string;
  is_superuser: boolean;
};

export type UserRequest = {
  username: string;
  password: string;
  is_superuser: boolean;
  is_staff: boolean;
  is_active: boolean;
  first_name: string;
  last_name: string;
  email?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type UserResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  username: string;
  password: string;
  is_superuser: boolean;
  first_name: string;
  last_name?: string;
  is_staff: boolean;
  is_active: boolean;
  date_joined: string;
  email?: string;
  last_login?: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type UsersListResponse = {
  items: Array<UserResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type ValidationErrorBodyResponse = {
  code?: number;
  message?: string;
  details?: Array<BaseExceptionDetail>;
  kind?: string;
};

export type VlanCreateRequest = {
  /**
   * The unique name of the entity.
   */
  name?: string;
  /**
   * The description of the VLAN.
   */
  description?: string;
  /**
   * The VLAN ID of the VLAN. Valid values are within the range [0, 4094].
   */
  vid?: number;
  /**
   * The MTU to use on the VLAN. Valid values are within the range [552, 65535].
   */
  mtu?: number;
  /**
   * The space this VLAN should be placed in. If not specified, the VLAN will be placed in the 'undefined' space.
   */
  space_id?: number;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type VlanResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  vid: number;
  name?: string;
  description: string;
  mtu: number;
  dhcp_on: boolean;
  external_dhcp?: string;
  primary_rack?: number;
  secondary_rack?: number;
  relay_vlan_id?: number;
  space?: BaseHref;
  kind?: string;
};

export type VlanUpdateRequest = {
  /**
   * The unique name of the entity.
   */
  name?: string;
  /**
   * The description of the VLAN.
   */
  description?: string;
  /**
   * The VLAN ID of the VLAN. Valid values are within the range [0, 4094].
   */
  vid?: number;
  /**
   * The MTU to use on the VLAN. Valid values are within the range [552, 65535].
   */
  mtu?: number;
  /**
   * The space this VLAN should be placed in. If not specified, the VLAN will be placed in the 'undefined' space.
   */
  space_id?: number;
  /**
   * Fabric ID containing the VLAN.
   */
  fabric_id: number;
  /**
   * Whether or not DHCP should be managed on the VLAN.
   */
  dhcp_on: boolean;
  /**
   * The primary rack controller ID managing the VLAN.
   */
  primary_rack_id?: number;
  /**
   * The secondary rack controller ID managing the VLAN
   */
  secondary_rack_id?: number;
  /**
   * Relay VLAN ID. Only set when this VLAN will be using a DHCP relay to forward DHCP requests to another VLAN that MAAS is managing. MAAS will not run the DHCP relay itself, it must be configured to proxy reqests to the primary and/or secondary rack controller interfaces for the VLAN specified in this field.
   */
  relay_vlan_id?: number;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type VlansListResponse = {
  items: Array<VlanResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type ZoneRequest = {
  /**
   * The unique name of the entity.
   */
  name: string;
  /**
   * The description of the zone.
   */
  description?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ZoneResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  name: string;
  description: string;
  kind?: string;
};

/**
 * Base HAL response class that every response object must extend. The response object will look like
 * {
 * '_links': {
 * 'self': {'href': '/api/v3/'}
 * },
 * '_embedded': {}
 * }
 */
export type ZoneWithSummaryResponse = {
  _links?: BaseHal;
  _embedded?: {
    [key: string]: unknown;
  };
  id: number;
  name: string;
  description: string;
  kind?: string;
  devices_count: number;
  machines_count: number;
  controllers_count: number;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ZonesListResponse = {
  items: Array<ZoneResponse>;
  total: number;
  next?: string;
  kind?: string;
};

/**
 * Base class for offset-paginated responses.
 * Derived classes should overwrite the items property
 */
export type ZonesWithSummaryListResponse = {
  items: Array<ZoneWithSummaryResponse>;
  total: number;
  next?: string;
  kind?: string;
};

export type AccessTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/auth/access_token";
};

export type AccessTokenErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type AccessTokenError = AccessTokenErrors[keyof AccessTokenErrors];

export type AccessTokenResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type AccessTokenResponse2 =
  AccessTokenResponses[keyof AccessTokenResponses];

export type LoginData = {
  body: BodyLogin;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/auth/login";
};

export type LoginErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
  /**
   * Successful Response
   */
  200: AccessTokenResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type ListEventsData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
    system_id?: Array<string>;
  };
  url: "/MAAS/a/v3/events";
};

export type ListEventsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListEventsError = ListEventsErrors[keyof ListEventsErrors];

export type ListEventsResponses = {
  /**
   * Successful Response
   */
  200: EventsListResponse;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type ListDomainsData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/domains";
};

export type ListDomainsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListDomainsError = ListDomainsErrors[keyof ListDomainsErrors];

export type ListDomainsResponses = {
  /**
   * Successful Response
   */
  200: DomainsListResponse;
};

export type ListDomainsResponse =
  ListDomainsResponses[keyof ListDomainsResponses];

export type CreateDomainData = {
  body: DomainRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/domains";
};

export type CreateDomainErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateDomainError = CreateDomainErrors[keyof CreateDomainErrors];

export type CreateDomainResponses = {
  /**
   * Successful Response
   */
  201: DomainResponse;
};

export type CreateDomainResponse =
  CreateDomainResponses[keyof CreateDomainResponses];

export type DeleteDomainData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    domain_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/domains/{domain_id}";
};

export type DeleteDomainErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteDomainError = DeleteDomainErrors[keyof DeleteDomainErrors];

export type DeleteDomainResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteDomainResponse =
  DeleteDomainResponses[keyof DeleteDomainResponses];

export type GetDomainData = {
  body?: never;
  path: {
    domain_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/domains/{domain_id}";
};

export type GetDomainErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetDomainError = GetDomainErrors[keyof GetDomainErrors];

export type GetDomainResponses = {
  /**
   * Successful Response
   */
  200: DomainResponse;
};

export type GetDomainResponse = GetDomainResponses[keyof GetDomainResponses];

export type ListFabricsData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics";
};

export type ListFabricsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricsError = ListFabricsErrors[keyof ListFabricsErrors];

export type ListFabricsResponses = {
  /**
   * Successful Response
   */
  200: FabricsListResponse;
};

export type ListFabricsResponse =
  ListFabricsResponses[keyof ListFabricsResponses];

export type CreateFabricData = {
  body: FabricRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/fabrics";
};

export type CreateFabricErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricError = CreateFabricErrors[keyof CreateFabricErrors];

export type CreateFabricResponses = {
  /**
   * Successful Response
   */
  201: FabricResponse;
};

export type CreateFabricResponse =
  CreateFabricResponses[keyof CreateFabricResponses];

export type DeleteFabricData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}";
};

export type DeleteFabricErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricError = DeleteFabricErrors[keyof DeleteFabricErrors];

export type DeleteFabricResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricResponse =
  DeleteFabricResponses[keyof DeleteFabricResponses];

export type GetFabricData = {
  body?: never;
  path: {
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}";
};

export type GetFabricErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricError = GetFabricErrors[keyof GetFabricErrors];

export type GetFabricResponses = {
  /**
   * Successful Response
   */
  200: FabricResponse;
};

export type GetFabricResponse = GetFabricResponses[keyof GetFabricResponses];

export type UpdateFabricData = {
  body: FabricRequest;
  path: {
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}";
};

export type UpdateFabricErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricError = UpdateFabricErrors[keyof UpdateFabricErrors];

export type UpdateFabricResponses = {
  /**
   * Successful Response
   */
  200: FabricResponse;
};

export type UpdateFabricResponse =
  UpdateFabricResponses[keyof UpdateFabricResponses];

export type ListInterfacesData = {
  body?: never;
  path: {
    node_id: number;
  };
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/machines/{node_id}/interfaces";
};

export type ListInterfacesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListInterfacesError =
  ListInterfacesErrors[keyof ListInterfacesErrors];

export type ListInterfacesResponses = {
  /**
   * Successful Response
   */
  200: InterfaceListResponse;
};

export type ListInterfacesResponse =
  ListInterfacesResponses[keyof ListInterfacesResponses];

export type ListFabricVlanSubnetIprangeData = {
  body?: never;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
  };
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges";
};

export type ListFabricVlanSubnetIprangeErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlanSubnetIprangeError =
  ListFabricVlanSubnetIprangeErrors[keyof ListFabricVlanSubnetIprangeErrors];

export type ListFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  200: IpRangeListResponse;
};

export type ListFabricVlanSubnetIprangeResponse =
  ListFabricVlanSubnetIprangeResponses[keyof ListFabricVlanSubnetIprangeResponses];

export type CreateFabricVlanSubnetIprangeData = {
  body: IpRangeCreateRequest;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges";
};

export type CreateFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanSubnetIprangeError =
  CreateFabricVlanSubnetIprangeErrors[keyof CreateFabricVlanSubnetIprangeErrors];

export type CreateFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  201: IpRangeResponse;
};

export type CreateFabricVlanSubnetIprangeResponse =
  CreateFabricVlanSubnetIprangeResponses[keyof CreateFabricVlanSubnetIprangeResponses];

export type DeleteFabricVlanSubnetIprangeData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
    iprange_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}";
};

export type DeleteFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanSubnetIprangeError =
  DeleteFabricVlanSubnetIprangeErrors[keyof DeleteFabricVlanSubnetIprangeErrors];

export type DeleteFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricVlanSubnetIprangeResponse =
  DeleteFabricVlanSubnetIprangeResponses[keyof DeleteFabricVlanSubnetIprangeResponses];

export type UpdateFabricVlanSubnetIprangeData = {
  body: IpRangeUpdateRequest;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
    iprange_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{iprange_id}";
};

export type UpdateFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanSubnetIprangeError =
  UpdateFabricVlanSubnetIprangeErrors[keyof UpdateFabricVlanSubnetIprangeErrors];

export type UpdateFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  200: IpRangeResponse;
};

export type UpdateFabricVlanSubnetIprangeResponse =
  UpdateFabricVlanSubnetIprangeResponses[keyof UpdateFabricVlanSubnetIprangeResponses];

export type GetFabricVlanSubnetIprangeData = {
  body?: never;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/ipranges/{id}";
};

export type GetFabricVlanSubnetIprangeErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanSubnetIprangeError =
  GetFabricVlanSubnetIprangeErrors[keyof GetFabricVlanSubnetIprangeErrors];

export type GetFabricVlanSubnetIprangeResponses = {
  /**
   * Successful Response
   */
  200: IpRangeResponse;
};

export type GetFabricVlanSubnetIprangeResponse =
  GetFabricVlanSubnetIprangeResponses[keyof GetFabricVlanSubnetIprangeResponses];

export type GetMachinePowerParametersData = {
  body?: never;
  path: {
    system_id: string;
  };
  query?: never;
  url: "/MAAS/a/v3/machines/{system_id}/power_parameters";
};

export type GetMachinePowerParametersErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetMachinePowerParametersError =
  GetMachinePowerParametersErrors[keyof GetMachinePowerParametersErrors];

export type GetMachinePowerParametersResponses = {
  /**
   * Successful Response
   */
  200: PowerDriverResponse;
};

export type GetMachinePowerParametersResponse =
  GetMachinePowerParametersResponses[keyof GetMachinePowerParametersResponses];

export type ListMachinePciDevicesData = {
  body?: never;
  path: {
    system_id: string;
  };
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/machines/{system_id}/pci_devices";
};

export type ListMachinePciDevicesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListMachinePciDevicesError =
  ListMachinePciDevicesErrors[keyof ListMachinePciDevicesErrors];

export type ListMachinePciDevicesResponses = {
  /**
   * Successful Response
   */
  200: PciDevicesListResponse;
};

export type ListMachinePciDevicesResponse =
  ListMachinePciDevicesResponses[keyof ListMachinePciDevicesResponses];

export type ListMachineUsbDevicesData = {
  body?: never;
  path: {
    system_id: string;
  };
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/machines/{system_id}/usb_devices";
};

export type ListMachineUsbDevicesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListMachineUsbDevicesError =
  ListMachineUsbDevicesErrors[keyof ListMachineUsbDevicesErrors];

export type ListMachineUsbDevicesResponses = {
  /**
   * Successful Response
   */
  200: UsbDevicesListResponse;
};

export type ListMachineUsbDevicesResponse =
  ListMachineUsbDevicesResponses[keyof ListMachineUsbDevicesResponses];

export type ListMachinesData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/machines";
};

export type ListMachinesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListMachinesError = ListMachinesErrors[keyof ListMachinesErrors];

export type ListMachinesResponses = {
  /**
   * Successful Response
   */
  200: MachinesListResponse;
};

export type ListMachinesResponse =
  ListMachinesResponses[keyof ListMachinesResponses];

export type ListFabricVlanSubnetReservedIpsData = {
  body?: never;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
  };
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips";
};

export type ListFabricVlanSubnetReservedIpsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlanSubnetReservedIpsError =
  ListFabricVlanSubnetReservedIpsErrors[keyof ListFabricVlanSubnetReservedIpsErrors];

export type ListFabricVlanSubnetReservedIpsResponses = {
  /**
   * Successful Response
   */
  200: ReservedIpsListResponse;
};

export type ListFabricVlanSubnetReservedIpsResponse =
  ListFabricVlanSubnetReservedIpsResponses[keyof ListFabricVlanSubnetReservedIpsResponses];

export type CreateFabricVlanSubnetReservedIpData = {
  body: ReservedIpCreateRequest;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips";
};

export type CreateFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanSubnetReservedIpError =
  CreateFabricVlanSubnetReservedIpErrors[keyof CreateFabricVlanSubnetReservedIpErrors];

export type CreateFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  201: ReservedIpResponse;
};

export type CreateFabricVlanSubnetReservedIpResponse =
  CreateFabricVlanSubnetReservedIpResponses[keyof CreateFabricVlanSubnetReservedIpResponses];

export type DeleteFabricVlanSubnetReservedIpData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}";
};

export type DeleteFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanSubnetReservedIpError =
  DeleteFabricVlanSubnetReservedIpErrors[keyof DeleteFabricVlanSubnetReservedIpErrors];

export type DeleteFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  200: unknown;
  /**
   * No Content
   */
  204: void;
};

export type DeleteFabricVlanSubnetReservedIpResponse =
  DeleteFabricVlanSubnetReservedIpResponses[keyof DeleteFabricVlanSubnetReservedIpResponses];

export type UpdateFabricVlanSubnetReservedIpData = {
  body: ReservedIpUpdateRequest;
  headers?: {
    "if-match"?: string;
  };
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{id}";
};

export type UpdateFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanSubnetReservedIpError =
  UpdateFabricVlanSubnetReservedIpErrors[keyof UpdateFabricVlanSubnetReservedIpErrors];

export type UpdateFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  200: ReservedIpResponse;
};

export type UpdateFabricVlanSubnetReservedIpResponse =
  UpdateFabricVlanSubnetReservedIpResponses[keyof UpdateFabricVlanSubnetReservedIpResponses];

export type GetFabricVlanSubnetReservedIpData = {
  body?: never;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
    reservedip_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}/reserved_ips/{reservedip_id}";
};

export type GetFabricVlanSubnetReservedIpErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanSubnetReservedIpError =
  GetFabricVlanSubnetReservedIpErrors[keyof GetFabricVlanSubnetReservedIpErrors];

export type GetFabricVlanSubnetReservedIpResponses = {
  /**
   * Successful Response
   */
  200: ReservedIpResponse;
};

export type GetFabricVlanSubnetReservedIpResponse =
  GetFabricVlanSubnetReservedIpResponses[keyof GetFabricVlanSubnetReservedIpResponses];

export type ListResourcePoolsData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/resource_pools";
};

export type ListResourcePoolsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListResourcePoolsError =
  ListResourcePoolsErrors[keyof ListResourcePoolsErrors];

export type ListResourcePoolsResponses = {
  /**
   * Successful Response
   */
  200: ResourcePoolsListResponse;
};

export type ListResourcePoolsResponse =
  ListResourcePoolsResponses[keyof ListResourcePoolsResponses];

export type CreateResourcePoolData = {
  body: ResourcePoolRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/resource_pools";
};

export type CreateResourcePoolErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateResourcePoolError =
  CreateResourcePoolErrors[keyof CreateResourcePoolErrors];

export type CreateResourcePoolResponses = {
  /**
   * Successful Response
   */
  201: ResourcePoolResponse;
};

export type CreateResourcePoolResponse =
  CreateResourcePoolResponses[keyof CreateResourcePoolResponses];

export type GetResourcePoolData = {
  body?: never;
  path: {
    resource_pool_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/resource_pools/{resource_pool_id}";
};

export type GetResourcePoolErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetResourcePoolError =
  GetResourcePoolErrors[keyof GetResourcePoolErrors];

export type GetResourcePoolResponses = {
  /**
   * Successful Response
   */
  200: ResourcePoolResponse;
};

export type GetResourcePoolResponse =
  GetResourcePoolResponses[keyof GetResourcePoolResponses];

export type UpdateResourcePoolData = {
  body: ResourcePoolRequest;
  path: {
    resource_pool_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/resource_pools/{resource_pool_id}";
};

export type UpdateResourcePoolErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateResourcePoolError =
  UpdateResourcePoolErrors[keyof UpdateResourcePoolErrors];

export type UpdateResourcePoolResponses = {
  /**
   * Successful Response
   */
  200: ResourcePoolResponse;
};

export type UpdateResourcePoolResponse =
  UpdateResourcePoolResponses[keyof UpdateResourcePoolResponses];

export type ListSpacesData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/spaces";
};

export type ListSpacesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListSpacesError = ListSpacesErrors[keyof ListSpacesErrors];

export type ListSpacesResponses = {
  /**
   * Successful Response
   */
  200: SpacesListResponse;
};

export type ListSpacesResponse = ListSpacesResponses[keyof ListSpacesResponses];

export type CreateSpaceData = {
  body: SpaceRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/spaces";
};

export type CreateSpaceErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateSpaceError = CreateSpaceErrors[keyof CreateSpaceErrors];

export type CreateSpaceResponses = {
  /**
   * Successful Response
   */
  201: SpaceResponse;
};

export type CreateSpaceResponse =
  CreateSpaceResponses[keyof CreateSpaceResponses];

export type DeleteSpaceData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    space_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/spaces/{space_id}";
};

export type DeleteSpaceErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteSpaceError = DeleteSpaceErrors[keyof DeleteSpaceErrors];

export type DeleteSpaceResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteSpaceResponse =
  DeleteSpaceResponses[keyof DeleteSpaceResponses];

export type GetSpaceData = {
  body?: never;
  path: {
    space_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/spaces/{space_id}";
};

export type GetSpaceErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetSpaceError = GetSpaceErrors[keyof GetSpaceErrors];

export type GetSpaceResponses = {
  /**
   * Successful Response
   */
  200: SpaceResponse;
};

export type GetSpaceResponse = GetSpaceResponses[keyof GetSpaceResponses];

export type UpdateSpaceData = {
  body: SpaceRequest;
  path: {
    space_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/spaces/{space_id}";
};

export type UpdateSpaceErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateSpaceError = UpdateSpaceErrors[keyof UpdateSpaceErrors];

export type UpdateSpaceResponses = {
  /**
   * Successful Response
   */
  200: SpaceResponse;
};

export type UpdateSpaceResponse =
  UpdateSpaceResponses[keyof UpdateSpaceResponses];

export type ListUserSshkeysData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/users/me/sshkeys";
};

export type ListUserSshkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListUserSshkeysError =
  ListUserSshkeysErrors[keyof ListUserSshkeysErrors];

export type ListUserSshkeysResponses = {
  /**
   * Successful Response
   */
  200: SshKeysListResponse;
};

export type ListUserSshkeysResponse =
  ListUserSshkeysResponses[keyof ListUserSshkeysResponses];

export type CreateUserSshkeysData = {
  body: SshKeyManualUploadRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys";
};

export type CreateUserSshkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateUserSshkeysError =
  CreateUserSshkeysErrors[keyof CreateUserSshkeysErrors];

export type CreateUserSshkeysResponses = {
  /**
   * Successful Response
   */
  201: SshKeyResponse;
};

export type CreateUserSshkeysResponse =
  CreateUserSshkeysResponses[keyof CreateUserSshkeysResponses];

export type DeleteUserSshkeyData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys/{id}";
};

export type DeleteUserSshkeyErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Precondition Failed
   */
  412: PreconditionFailedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteUserSshkeyError =
  DeleteUserSshkeyErrors[keyof DeleteUserSshkeyErrors];

export type DeleteUserSshkeyResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteUserSshkeyResponse =
  DeleteUserSshkeyResponses[keyof DeleteUserSshkeyResponses];

export type GetUserSshkeyData = {
  body?: never;
  path: {
    sshkey_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys/{sshkey_id}";
};

export type GetUserSshkeyErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserSshkeyError = GetUserSshkeyErrors[keyof GetUserSshkeyErrors];

export type GetUserSshkeyResponses = {
  /**
   * Successful Response
   */
  200: SshKeyResponse;
};

export type GetUserSshkeyResponse =
  GetUserSshkeyResponses[keyof GetUserSshkeyResponses];

export type ImportUserSshkeysData = {
  body: SshKeyImportFromSourceRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me/sshkeys:import";
};

export type ImportUserSshkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ImportUserSshkeysError =
  ImportUserSshkeysErrors[keyof ImportUserSshkeysErrors];

export type ImportUserSshkeysResponses = {
  /**
   * Successful Response
   */
  201: SshKeysListResponse;
};

export type ImportUserSshkeysResponse =
  ImportUserSshkeysResponses[keyof ImportUserSshkeysResponses];

export type GetUserSslkeysData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/users/me/sslkeys";
};

export type GetUserSslkeysErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserSslkeysError =
  GetUserSslkeysErrors[keyof GetUserSslkeysErrors];

export type GetUserSslkeysResponses = {
  /**
   * Successful Response
   */
  200: SslKeyListResponse;
};

export type GetUserSslkeysResponse =
  GetUserSslkeysResponses[keyof GetUserSslkeysResponses];

export type CreateUserSslkeyData = {
  body: SslKeyRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me/sslkeys";
};

export type CreateUserSslkeyErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateUserSslkeyError =
  CreateUserSslkeyErrors[keyof CreateUserSslkeyErrors];

export type CreateUserSslkeyResponses = {
  /**
   * Successful Response
   */
  201: SslKeyResponse;
};

export type CreateUserSslkeyResponse =
  CreateUserSslkeyResponses[keyof CreateUserSslkeyResponses];

export type DeleteUserSslkeyData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    sslkey_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}";
};

export type DeleteUserSslkeyErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteUserSslkeyError =
  DeleteUserSslkeyErrors[keyof DeleteUserSslkeyErrors];

export type DeleteUserSslkeyResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteUserSslkeyResponse =
  DeleteUserSslkeyResponses[keyof DeleteUserSslkeyResponses];

export type GetUserSslkeyData = {
  body?: never;
  path: {
    sslkey_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/me/sslkeys/{sslkey_id}";
};

export type GetUserSslkeyErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserSslkeyError = GetUserSslkeyErrors[keyof GetUserSslkeyErrors];

export type GetUserSslkeyResponses = {
  /**
   * Successful Response
   */
  200: SslKeyResponse;
};

export type GetUserSslkeyResponse =
  GetUserSslkeyResponses[keyof GetUserSslkeyResponses];

export type ListFabricVlanSubnetsData = {
  body?: never;
  path: {
    fabric_id: number;
    vlan_id: number;
  };
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets";
};

export type ListFabricVlanSubnetsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlanSubnetsError =
  ListFabricVlanSubnetsErrors[keyof ListFabricVlanSubnetsErrors];

export type ListFabricVlanSubnetsResponses = {
  /**
   * Successful Response
   */
  200: SubnetsListResponse;
};

export type ListFabricVlanSubnetsResponse =
  ListFabricVlanSubnetsResponses[keyof ListFabricVlanSubnetsResponses];

export type CreateFabricVlanSubnetData = {
  body: SubnetRequest;
  path: {
    fabric_id: number;
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets";
};

export type CreateFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanSubnetError =
  CreateFabricVlanSubnetErrors[keyof CreateFabricVlanSubnetErrors];

export type CreateFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  201: SubnetResponse;
};

export type CreateFabricVlanSubnetResponse =
  CreateFabricVlanSubnetResponses[keyof CreateFabricVlanSubnetResponses];

export type DeleteFabricVlanSubnetData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    fabric_id: number;
    vlan_id: number;
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}";
};

export type DeleteFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanSubnetError =
  DeleteFabricVlanSubnetErrors[keyof DeleteFabricVlanSubnetErrors];

export type DeleteFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricVlanSubnetResponse =
  DeleteFabricVlanSubnetResponses[keyof DeleteFabricVlanSubnetResponses];

export type UpdateFabricVlanSubnetData = {
  body: SubnetRequest;
  path: {
    fabric_id: number;
    vlan_id: number;
    id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{id}";
};

export type UpdateFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanSubnetError =
  UpdateFabricVlanSubnetErrors[keyof UpdateFabricVlanSubnetErrors];

export type UpdateFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  200: SubnetResponse;
};

export type UpdateFabricVlanSubnetResponse =
  UpdateFabricVlanSubnetResponses[keyof UpdateFabricVlanSubnetResponses];

export type GetFabricVlanSubnetData = {
  body?: never;
  path: {
    fabric_id: number;
    vlan_id: number;
    subnet_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}/subnets/{subnet_id}";
};

export type GetFabricVlanSubnetErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanSubnetError =
  GetFabricVlanSubnetErrors[keyof GetFabricVlanSubnetErrors];

export type GetFabricVlanSubnetResponses = {
  /**
   * Successful Response
   */
  200: SubnetResponse;
};

export type GetFabricVlanSubnetResponse =
  GetFabricVlanSubnetResponses[keyof GetFabricVlanSubnetResponses];

export type GetUserInfoData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users/me";
};

export type GetUserInfoErrors = {
  /**
   * Unauthorized
   */
  401: UnauthorizedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserInfoError = GetUserInfoErrors[keyof GetUserInfoErrors];

export type GetUserInfoResponses = {
  /**
   * Successful Response
   */
  200: UserInfoResponse;
};

export type GetUserInfoResponse =
  GetUserInfoResponses[keyof GetUserInfoResponses];

export type ListUsersData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/users";
};

export type ListUsersErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersListResponse;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
  body: UserRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/users";
};

export type CreateUserErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
  /**
   * Successful Response
   */
  201: UserResponse;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    user_id: number;
  };
  query?: {
    /**
     * The id of the user to transfer the resources to.
     */
    transfer_resources_to?: number;
  };
  url: "/MAAS/a/v3/users/{user_id}";
};

export type DeleteUserErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Precondition Failed
   */
  412: PreconditionFailedBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
  body?: never;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/{user_id}";
};

export type GetUserErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
  body: UserRequest;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/users/{user_id}";
};

export type UpdateUserErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type ListFabricVlansData = {
  body?: never;
  path: {
    fabric_id: number;
  };
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans";
};

export type ListFabricVlansErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListFabricVlansError =
  ListFabricVlansErrors[keyof ListFabricVlansErrors];

export type ListFabricVlansResponses = {
  /**
   * Successful Response
   */
  200: VlansListResponse;
};

export type ListFabricVlansResponse =
  ListFabricVlansResponses[keyof ListFabricVlansResponses];

export type CreateFabricVlanData = {
  body: VlanCreateRequest;
  path: {
    fabric_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans";
};

export type CreateFabricVlanErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateFabricVlanError =
  CreateFabricVlanErrors[keyof CreateFabricVlanErrors];

export type CreateFabricVlanResponses = {
  /**
   * OK
   */
  200: VlanResponse;
  /**
   * Successful Response
   */
  201: unknown;
};

export type CreateFabricVlanResponse =
  CreateFabricVlanResponses[keyof CreateFabricVlanResponses];

export type DeleteFabricVlanData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    fabric_id: number;
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}";
};

export type DeleteFabricVlanErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteFabricVlanError =
  DeleteFabricVlanErrors[keyof DeleteFabricVlanErrors];

export type DeleteFabricVlanResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteFabricVlanResponse =
  DeleteFabricVlanResponses[keyof DeleteFabricVlanResponses];

export type GetFabricVlanData = {
  body?: never;
  path: {
    fabric_id: number;
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}";
};

export type GetFabricVlanErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetFabricVlanError = GetFabricVlanErrors[keyof GetFabricVlanErrors];

export type GetFabricVlanResponses = {
  /**
   * Successful Response
   */
  200: VlanResponse;
};

export type GetFabricVlanResponse =
  GetFabricVlanResponses[keyof GetFabricVlanResponses];

export type UpdateFabricVlanData = {
  body: VlanUpdateRequest;
  path: {
    fabric_id: number;
    vlan_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/fabrics/{fabric_id}/vlans/{vlan_id}";
};

export type UpdateFabricVlanErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateFabricVlanError =
  UpdateFabricVlanErrors[keyof UpdateFabricVlanErrors];

export type UpdateFabricVlanResponses = {
  /**
   * Successful Response
   */
  200: VlanResponse;
};

export type UpdateFabricVlanResponse =
  UpdateFabricVlanResponses[keyof UpdateFabricVlanResponses];

export type ListZonesData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
    id?: Array<number>;
  };
  url: "/MAAS/a/v3/zones";
};

export type ListZonesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListZonesError = ListZonesErrors[keyof ListZonesErrors];

export type ListZonesResponses = {
  /**
   * Successful Response
   */
  200: ZonesListResponse;
};

export type ListZonesResponse = ListZonesResponses[keyof ListZonesResponses];

export type CreateZoneData = {
  body: ZoneRequest;
  path?: never;
  query?: never;
  url: "/MAAS/a/v3/zones";
};

export type CreateZoneErrors = {
  /**
   * Conflict
   */
  409: ConflictBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type CreateZoneError = CreateZoneErrors[keyof CreateZoneErrors];

export type CreateZoneResponses = {
  /**
   * Successful Response
   */
  201: ZoneResponse;
};

export type CreateZoneResponse = CreateZoneResponses[keyof CreateZoneResponses];

export type DeleteZoneData = {
  body?: never;
  headers?: {
    "if-match"?: string;
  };
  path: {
    zone_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/zones/{zone_id}";
};

export type DeleteZoneErrors = {
  /**
   * Bad Request
   */
  400: BadRequestBodyResponse;
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type DeleteZoneError = DeleteZoneErrors[keyof DeleteZoneErrors];

export type DeleteZoneResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type DeleteZoneResponse = DeleteZoneResponses[keyof DeleteZoneResponses];

export type GetZoneData = {
  body?: never;
  path: {
    zone_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/zones/{zone_id}";
};

export type GetZoneErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type GetZoneError = GetZoneErrors[keyof GetZoneErrors];

export type GetZoneResponses = {
  /**
   * Successful Response
   */
  200: ZoneResponse;
};

export type GetZoneResponse = GetZoneResponses[keyof GetZoneResponses];

export type UpdateZoneData = {
  body: ZoneRequest;
  path: {
    zone_id: number;
  };
  query?: never;
  url: "/MAAS/a/v3/zones/{zone_id}";
};

export type UpdateZoneErrors = {
  /**
   * Not Found
   */
  404: NotFoundBodyResponse;
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type UpdateZoneError = UpdateZoneErrors[keyof UpdateZoneErrors];

export type UpdateZoneResponses = {
  /**
   * Successful Response
   */
  200: ZoneResponse;
};

export type UpdateZoneResponse = UpdateZoneResponses[keyof UpdateZoneResponses];

export type ListZonesWithSummaryData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    size?: number;
  };
  url: "/MAAS/a/v3/zones_with_summary";
};

export type ListZonesWithSummaryErrors = {
  /**
   * Unprocessable Entity
   */
  422: ValidationErrorBodyResponse;
};

export type ListZonesWithSummaryError =
  ListZonesWithSummaryErrors[keyof ListZonesWithSummaryErrors];

export type ListZonesWithSummaryResponses = {
  /**
   * Successful Response
   */
  200: ZonesWithSummaryListResponse;
};

export type ListZonesWithSummaryResponse =
  ListZonesWithSummaryResponses[keyof ListZonesWithSummaryResponses];
